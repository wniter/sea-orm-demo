{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1","program":"C:\\Users\\admin\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","pest_derive","--edition=2018","C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","proc-macro","--emit=dep-info,link","-C","prefer-dynamic","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=656c5161b0ea0e5e","-C","extra-filename=-656c5161b0ea0e5e","--out-dir","f:\\sea-orm-demo\\axum_examples\\async-graphql\\target\\rls\\debug\\deps","-L","dependency=f:\\sea-orm-demo\\axum_examples\\async-graphql\\target\\rls\\debug\\deps","--extern","pest=f:\\sea-orm-demo\\axum_examples\\async-graphql\\target\\rls\\debug\\deps\\libpest-42fee88d003fca50.rlib","--extern","pest_generator=f:\\sea-orm-demo\\axum_examples\\async-graphql\\target\\rls\\debug\\deps\\libpest_generator-75cd9659a7c1d834.rlib","--extern","proc_macro","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\admin\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"f:\\sea-orm-demo\\axum_examples\\async-graphql\\target\\rls\\debug\\deps\\pest_derive-656c5161b0ea0e5e.dll"},"prelude":{"crate_id":{"name":"pest_derive","disambiguator":[12310521728689761240,0]},"crate_root":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src","external_crates":[{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":16,"id":{"name":"pest_generator","disambiguator":[8295091511147660272,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":17,"id":{"name":"pest","disambiguator":[11517885792441335486,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":18,"id":{"name":"ucd_trie","disambiguator":[9478197013699307798,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":19,"id":{"name":"thiserror","disambiguator":[12533433158700258579,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":20,"id":{"name":"thiserror_impl","disambiguator":[15055098114464983270,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":21,"id":{"name":"pest_meta","disambiguator":[6700360921493781255,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":22,"id":{"name":"once_cell","disambiguator":[1560632664133535288,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":23,"id":{"name":"proc_macro","disambiguator":[4259392520498179257,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":24,"id":{"name":"proc_macro2","disambiguator":[18024340952456787626,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":25,"id":{"name":"unicode_ident","disambiguator":[12690740398476457931,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":26,"id":{"name":"quote","disambiguator":[4727415688294124467,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","num":27,"id":{"name":"syn","disambiguator":[15931297116159294693,0]}}],"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":407,"byte_end":12142,"line_start":10,"line_end":301,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":407,"byte_end":12142,"line_start":10,"line_end":301,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9}],"decl_id":null,"docs":" # pest. The Elegant Parser","sig":null,"attributes":[{"value":"/ # pest. The Elegant Parser","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":407,"byte_end":437,"line_start":10,"line_end":10,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":438,"byte_end":441,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ pest is a general purpose parser written in Rust with a focus on accessibility, correctness,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":442,"byte_end":538,"line_start":12,"line_end":12,"column_start":1,"column_end":97}},{"value":"/ and performance. It uses parsing expression grammars (or [PEG]) as input, which are similar in","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":539,"byte_end":637,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"/ spirit to regular expressions, but which offer the enhanced expressivity needed to parse","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":638,"byte_end":730,"line_start":14,"line_end":14,"column_start":1,"column_end":93}},{"value":"/ complex languages.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":731,"byte_end":753,"line_start":15,"line_end":15,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":754,"byte_end":757,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [PEG]: https://en.wikipedia.org/wiki/Parsing_expression_grammar","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":758,"byte_end":825,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":826,"byte_end":829,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ## Getting started","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":830,"byte_end":852,"line_start":19,"line_end":19,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":853,"byte_end":856,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The recommended way to start parsing with pest is to read the official [book].","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":857,"byte_end":939,"line_start":21,"line_end":21,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":940,"byte_end":943,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Other helpful resources:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":944,"byte_end":972,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":973,"byte_end":976,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ * API reference on [docs.rs]","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":977,"byte_end":1009,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"/ * play with grammars and share them on our [fiddle]","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1010,"byte_end":1065,"line_start":26,"line_end":26,"column_start":1,"column_end":56}},{"value":"/ * leave feedback, ask questions, or greet us on [Gitter]","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1066,"byte_end":1126,"line_start":27,"line_end":27,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1127,"byte_end":1130,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ [book]: https://pest-parser.github.io/book","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1131,"byte_end":1177,"line_start":29,"line_end":29,"column_start":1,"column_end":47}},{"value":"/ [docs.rs]: https://docs.rs/pest","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1178,"byte_end":1213,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/ [fiddle]: https://pest-parser.github.io/#editor","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1214,"byte_end":1265,"line_start":31,"line_end":31,"column_start":1,"column_end":52}},{"value":"/ [Gitter]: https://gitter.im/dragostis/pest","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1266,"byte_end":1312,"line_start":32,"line_end":32,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1313,"byte_end":1316,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## `.pest` files","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1317,"byte_end":1337,"line_start":34,"line_end":34,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1338,"byte_end":1341,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Grammar definitions reside in custom `.pest` files located in the `src` directory. Their path is","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1342,"byte_end":1442,"line_start":36,"line_end":36,"column_start":1,"column_end":101}},{"value":"/ relative to `src` and is specified between the `derive` attribute and empty `struct` that","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1443,"byte_end":1536,"line_start":37,"line_end":37,"column_start":1,"column_end":94}},{"value":"/ `Parser` will be derived on.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1537,"byte_end":1569,"line_start":38,"line_end":38,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1570,"byte_end":1573,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1574,"byte_end":1587,"line_start":40,"line_end":40,"column_start":1,"column_end":14}},{"value":"/ #[derive(Parser)]","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1588,"byte_end":1609,"line_start":41,"line_end":41,"column_start":1,"column_end":22}},{"value":"/ #[grammar = \"path/to/my_grammar.pest\"] // relative to src","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1610,"byte_end":1671,"line_start":42,"line_end":42,"column_start":1,"column_end":62}},{"value":"/ struct MyParser;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1672,"byte_end":1692,"line_start":43,"line_end":43,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1693,"byte_end":1700,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1701,"byte_end":1704,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ## Inline grammars","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1705,"byte_end":1727,"line_start":46,"line_end":46,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1728,"byte_end":1731,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Grammars can also be inlined by using the `#[grammar_inline = \"...\"]` attribute.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1732,"byte_end":1816,"line_start":48,"line_end":48,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1817,"byte_end":1820,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ## Grammar","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1821,"byte_end":1835,"line_start":50,"line_end":50,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1836,"byte_end":1839,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ A grammar is a series of rules separated by whitespace, possibly containing comments.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1840,"byte_end":1929,"line_start":52,"line_end":52,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1930,"byte_end":1933,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ### Comments","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1934,"byte_end":1950,"line_start":54,"line_end":54,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1951,"byte_end":1954,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Comments start with `//` and end at the end of the line.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":1955,"byte_end":2015,"line_start":56,"line_end":56,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2016,"byte_end":2019,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2020,"byte_end":2031,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"/ // a comment","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2032,"byte_end":2048,"line_start":59,"line_end":59,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2049,"byte_end":2056,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2057,"byte_end":2060,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ### Rules","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2061,"byte_end":2074,"line_start":62,"line_end":62,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2075,"byte_end":2078,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Rules have the following form:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2079,"byte_end":2113,"line_start":64,"line_end":64,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2114,"byte_end":2117,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2118,"byte_end":2131,"line_start":66,"line_end":66,"column_start":1,"column_end":14}},{"value":"/ name = optional_modifier { expression }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2132,"byte_end":2175,"line_start":67,"line_end":67,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2176,"byte_end":2183,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2184,"byte_end":2187,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ The name of the rule is formed from alphanumeric characters or `_` with the condition that the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2188,"byte_end":2286,"line_start":70,"line_end":70,"column_start":1,"column_end":99}},{"value":"/ first character is not a digit and is used to create token pairs. When the rule starts being","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2287,"byte_end":2383,"line_start":71,"line_end":71,"column_start":1,"column_end":97}},{"value":"/ parsed, the starting part of the token is being produced, with the ending part being produced","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2384,"byte_end":2481,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"/ when the rule finishes parsing.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2482,"byte_end":2517,"line_start":73,"line_end":73,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2518,"byte_end":2521,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The following token pair notation `a(b(), c())` denotes the tokens: start `a`, start `b`, end","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2522,"byte_end":2619,"line_start":75,"line_end":75,"column_start":1,"column_end":98}},{"value":"/ `b`, start `c`, end `c`, end `a`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2620,"byte_end":2657,"line_start":76,"line_end":76,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2658,"byte_end":2661,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ #### Modifiers","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2662,"byte_end":2680,"line_start":78,"line_end":78,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2681,"byte_end":2684,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ Modifiers are optional and can be one of `_`, `@`, `$`, or `!`. These modifiers change the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2685,"byte_end":2779,"line_start":80,"line_end":80,"column_start":1,"column_end":95}},{"value":"/ behavior of the rules.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2780,"byte_end":2806,"line_start":81,"line_end":81,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2807,"byte_end":2810,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ 1. Silent (`_`)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2811,"byte_end":2830,"line_start":83,"line_end":83,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2831,"byte_end":2834,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/     Silent rules do not create token pairs during parsing, nor are they error-reported.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2835,"byte_end":2926,"line_start":85,"line_end":85,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2927,"byte_end":2930,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/     ```ignore","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2931,"byte_end":2948,"line_start":87,"line_end":87,"column_start":1,"column_end":18}},{"value":"/     a = _{ \"a\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2949,"byte_end":2969,"line_start":88,"line_end":88,"column_start":1,"column_end":21}},{"value":"/     b =  { a ~ \"b\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2970,"byte_end":2994,"line_start":89,"line_end":89,"column_start":1,"column_end":25}},{"value":"/     ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":2995,"byte_end":3006,"line_start":90,"line_end":90,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3007,"byte_end":3010,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/     Parsing `\"ab\"` produces the token pair `b()`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3011,"byte_end":3064,"line_start":92,"line_end":92,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3065,"byte_end":3068,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ 2. Atomic (`@`)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3069,"byte_end":3088,"line_start":94,"line_end":94,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3089,"byte_end":3092,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/     Atomic rules do not accept whitespace or comments within their expressions and have a","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3093,"byte_end":3186,"line_start":96,"line_end":96,"column_start":1,"column_end":94}},{"value":"/     cascading effect on any rule they call. I.e. rules that are not atomic but are called by atomic","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3187,"byte_end":3290,"line_start":97,"line_end":97,"column_start":1,"column_end":104}},{"value":"/     rules behave atomically.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3291,"byte_end":3323,"line_start":98,"line_end":98,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3324,"byte_end":3327,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/     Any rules called by atomic rules do not generate token pairs.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3328,"byte_end":3397,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3398,"byte_end":3401,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/     ```ignore","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3402,"byte_end":3419,"line_start":102,"line_end":102,"column_start":1,"column_end":18}},{"value":"/     a =  { \"a\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3420,"byte_end":3440,"line_start":103,"line_end":103,"column_start":1,"column_end":21}},{"value":"/     b = @{ a ~ \"b\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3441,"byte_end":3465,"line_start":104,"line_end":104,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3466,"byte_end":3469,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/     WHITESPACE = _{ \" \" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3470,"byte_end":3499,"line_start":106,"line_end":106,"column_start":1,"column_end":30}},{"value":"/     ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3500,"byte_end":3511,"line_start":107,"line_end":107,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3512,"byte_end":3515,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/     Parsing `\"ab\"` produces the token pair `b()`, while `\"a   b\"` produces an error.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3516,"byte_end":3604,"line_start":109,"line_end":109,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3605,"byte_end":3608,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ 3. Compound-atomic (`$`)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3609,"byte_end":3637,"line_start":111,"line_end":111,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3638,"byte_end":3641,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/     Compound-atomic are identical to atomic rules with the exception that rules called by them are","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3642,"byte_end":3744,"line_start":113,"line_end":113,"column_start":1,"column_end":103}},{"value":"/     not forbidden from generating token pairs.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3745,"byte_end":3795,"line_start":114,"line_end":114,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3796,"byte_end":3799,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/     ```ignore","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3800,"byte_end":3817,"line_start":116,"line_end":116,"column_start":1,"column_end":18}},{"value":"/     a =  { \"a\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3818,"byte_end":3838,"line_start":117,"line_end":117,"column_start":1,"column_end":21}},{"value":"/     b = ${ a ~ \"b\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3839,"byte_end":3863,"line_start":118,"line_end":118,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3864,"byte_end":3867,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/     WHITESPACE = _{ \" \" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3868,"byte_end":3897,"line_start":120,"line_end":120,"column_start":1,"column_end":30}},{"value":"/     ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3898,"byte_end":3909,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3910,"byte_end":3913,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/     Parsing `\"ab\"` produces the token pairs `b(a())`, while `\"a   b\"` produces an error.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":3914,"byte_end":4006,"line_start":123,"line_end":123,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4007,"byte_end":4010,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ 4. Non-atomic (`!`)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4011,"byte_end":4034,"line_start":125,"line_end":125,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4035,"byte_end":4038,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/     Non-atomic are identical to normal rules with the exception that they stop the cascading effect","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4039,"byte_end":4142,"line_start":127,"line_end":127,"column_start":1,"column_end":104}},{"value":"/     of atomic and compound-atomic rules.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4143,"byte_end":4187,"line_start":128,"line_end":128,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4188,"byte_end":4191,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/     ```ignore","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4192,"byte_end":4209,"line_start":130,"line_end":130,"column_start":1,"column_end":18}},{"value":"/     a =  { \"a\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4210,"byte_end":4230,"line_start":131,"line_end":131,"column_start":1,"column_end":21}},{"value":"/     b = !{ a ~ \"b\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4231,"byte_end":4255,"line_start":132,"line_end":132,"column_start":1,"column_end":25}},{"value":"/     c = @{ b }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4256,"byte_end":4274,"line_start":133,"line_end":133,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4275,"byte_end":4278,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/     WHITESPACE = _{ \" \" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4279,"byte_end":4308,"line_start":135,"line_end":135,"column_start":1,"column_end":30}},{"value":"/     ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4309,"byte_end":4320,"line_start":136,"line_end":136,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4321,"byte_end":4324,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/     Parsing both `\"ab\"` and `\"a   b\"` produce the token pairs `c(a())`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4325,"byte_end":4400,"line_start":138,"line_end":138,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4401,"byte_end":4404,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ #### Expressions","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4405,"byte_end":4425,"line_start":140,"line_end":140,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4426,"byte_end":4429,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ Expressions can be either terminals or non-terminals.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4430,"byte_end":4487,"line_start":142,"line_end":142,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4488,"byte_end":4491,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ 1. Terminals","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4492,"byte_end":4508,"line_start":144,"line_end":144,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4509,"byte_end":4512,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/     | Terminal   | Usage                                                          |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4513,"byte_end":4600,"line_start":146,"line_end":146,"column_start":1,"column_end":88}},{"value":"/     |------------|----------------------------------------------------------------|","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4601,"byte_end":4688,"line_start":147,"line_end":147,"column_start":1,"column_end":88}},{"value":"/     | `\"a\"`      | matches the exact string `\"a\"`                                 |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4689,"byte_end":4776,"line_start":148,"line_end":148,"column_start":1,"column_end":88}},{"value":"/     | `^\"a\"`     | matches the exact string `\"a\"` case insensitively (ASCII only) |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4777,"byte_end":4864,"line_start":149,"line_end":149,"column_start":1,"column_end":88}},{"value":"/     | `'a'..'z'` | matches one character between `'a'` and `'z'`                  |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4865,"byte_end":4952,"line_start":150,"line_end":150,"column_start":1,"column_end":88}},{"value":"/     | `a`        | matches rule `a`                                               |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":4953,"byte_end":5040,"line_start":151,"line_end":151,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5041,"byte_end":5044,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ Strings and characters follow","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5045,"byte_end":5078,"line_start":153,"line_end":153,"column_start":1,"column_end":34}},{"value":"/ [Rust's escape mechanisms](https://doc.rust-lang.org/reference/tokens.html#byte-escapes), while","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5079,"byte_end":5178,"line_start":154,"line_end":154,"column_start":1,"column_end":100}},{"value":"/ identifiers can contain alpha-numeric characters and underscores (`_`), as long as they do not","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5179,"byte_end":5277,"line_start":155,"line_end":155,"column_start":1,"column_end":99}},{"value":"/ start with a digit.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5278,"byte_end":5301,"line_start":156,"line_end":156,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5302,"byte_end":5305,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ 2. Non-terminals","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5306,"byte_end":5326,"line_start":158,"line_end":158,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5327,"byte_end":5330,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/     | Non-terminal          | Usage                                                      |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5331,"byte_end":5425,"line_start":160,"line_end":160,"column_start":1,"column_end":95}},{"value":"/     |-----------------------|------------------------------------------------------------|","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5426,"byte_end":5520,"line_start":161,"line_end":161,"column_start":1,"column_end":95}},{"value":"/     | `(e)`                 | matches `e`                                                |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5521,"byte_end":5615,"line_start":162,"line_end":162,"column_start":1,"column_end":95}},{"value":"/     | `e1 ~ e2`             | matches the sequence `e1` `e2`                             |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5616,"byte_end":5710,"line_start":163,"line_end":163,"column_start":1,"column_end":95}},{"value":"/     | <code>e1 \\| e2</code> | matches either `e1` or `e2`                                |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5711,"byte_end":5805,"line_start":164,"line_end":164,"column_start":1,"column_end":95}},{"value":"/     | `e*`                  | matches `e` zero or more times                             |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5806,"byte_end":5900,"line_start":165,"line_end":165,"column_start":1,"column_end":95}},{"value":"/     | `e+`                  | matches `e` one or more times                              |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5901,"byte_end":5995,"line_start":166,"line_end":166,"column_start":1,"column_end":95}},{"value":"/     | `e{n}`                | matches `e` exactly `n` times                              |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":5996,"byte_end":6090,"line_start":167,"line_end":167,"column_start":1,"column_end":95}},{"value":"/     | `e{, n}`              | matches `e` at most `n` times                              |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6091,"byte_end":6185,"line_start":168,"line_end":168,"column_start":1,"column_end":95}},{"value":"/     | `e{n,} `              | matches `e` at least `n` times                             |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6186,"byte_end":6280,"line_start":169,"line_end":169,"column_start":1,"column_end":95}},{"value":"/     | `e{m, n}`             | matches `e` between `m` and `n` times inclusively          |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6281,"byte_end":6375,"line_start":170,"line_end":170,"column_start":1,"column_end":95}},{"value":"/     | `e?`                  | optionally matches `e`                                     |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6376,"byte_end":6470,"line_start":171,"line_end":171,"column_start":1,"column_end":95}},{"value":"/     | `&e`                  | matches `e` without making progress                        |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6471,"byte_end":6565,"line_start":172,"line_end":172,"column_start":1,"column_end":95}},{"value":"/     | `!e`                  | matches if `e` doesn't match without making progress       |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6566,"byte_end":6660,"line_start":173,"line_end":173,"column_start":1,"column_end":95}},{"value":"/     | `PUSH(e)`             | matches `e` and pushes it's captured string down the stack |","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6661,"byte_end":6755,"line_start":174,"line_end":174,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6756,"byte_end":6759,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/     where `e`, `e1`, and `e2` are expressions.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6760,"byte_end":6810,"line_start":176,"line_end":176,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6811,"byte_end":6814,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ Expressions can modify the stack only if they match the input. For example,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6815,"byte_end":6894,"line_start":178,"line_end":178,"column_start":1,"column_end":80}},{"value":"/ if `e1` in the compound expression `e1 | e2` does not match the input, then","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6895,"byte_end":6974,"line_start":179,"line_end":179,"column_start":1,"column_end":80}},{"value":"/ it does not modify the stack, so `e2` sees the stack in the same state as","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":6975,"byte_end":7052,"line_start":180,"line_end":180,"column_start":1,"column_end":78}},{"value":"/ `e1` did. Repetitions and optionals (`e*`, `e+`, `e{, n}`, `e{n,}`,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7053,"byte_end":7124,"line_start":181,"line_end":181,"column_start":1,"column_end":72}},{"value":"/ `e{m,n}`, `e?`) can modify the stack each time `e` matches. The `!e` and `&e`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7125,"byte_end":7206,"line_start":182,"line_end":182,"column_start":1,"column_end":82}},{"value":"/ expressions are a special case; they never modify the stack.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7207,"byte_end":7271,"line_start":183,"line_end":183,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7272,"byte_end":7275,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ ## Special rules","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7276,"byte_end":7296,"line_start":185,"line_end":185,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7297,"byte_end":7300,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ Special rules can be called within the grammar. They are:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7301,"byte_end":7362,"line_start":187,"line_end":187,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7363,"byte_end":7366,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ * `WHITESPACE` - runs between rules and sub-rules","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7367,"byte_end":7420,"line_start":189,"line_end":189,"column_start":1,"column_end":54}},{"value":"/ * `COMMENT` - runs between rules and sub-rules","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7421,"byte_end":7471,"line_start":190,"line_end":190,"column_start":1,"column_end":51}},{"value":"/ * `ANY` - matches exactly one `char`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7472,"byte_end":7512,"line_start":191,"line_end":191,"column_start":1,"column_end":41}},{"value":"/ * `SOI` - (start-of-input) matches only when a `Parser` is still at the starting position","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7513,"byte_end":7606,"line_start":192,"line_end":192,"column_start":1,"column_end":94}},{"value":"/ * `EOI` - (end-of-input) matches only when a `Parser` has reached its end","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7607,"byte_end":7684,"line_start":193,"line_end":193,"column_start":1,"column_end":78}},{"value":"/ * `POP` - pops a string from the stack and matches it","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7685,"byte_end":7742,"line_start":194,"line_end":194,"column_start":1,"column_end":58}},{"value":"/ * `POP_ALL` - pops the entire state of the stack and matches it","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7743,"byte_end":7810,"line_start":195,"line_end":195,"column_start":1,"column_end":68}},{"value":"/ * `PEEK` - peeks a string from the stack and matches it","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7811,"byte_end":7870,"line_start":196,"line_end":196,"column_start":1,"column_end":60}},{"value":"/ * `PEEK[a..b]` - peeks part of the stack and matches it","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7871,"byte_end":7930,"line_start":197,"line_end":197,"column_start":1,"column_end":60}},{"value":"/ * `PEEK_ALL` - peeks the entire state of the stack and matches it","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":7931,"byte_end":8000,"line_start":198,"line_end":198,"column_start":1,"column_end":70}},{"value":"/ * `DROP` - drops the top of the stack (fails to match if the stack is empty)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8001,"byte_end":8081,"line_start":199,"line_end":199,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8082,"byte_end":8085,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ `WHITESPACE` and `COMMENT` should be defined manually if needed. All other rules cannot be","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8086,"byte_end":8180,"line_start":201,"line_end":201,"column_start":1,"column_end":95}},{"value":"/ overridden.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8181,"byte_end":8196,"line_start":202,"line_end":202,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8197,"byte_end":8200,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ ## `WHITESPACE` and `COMMENT`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8201,"byte_end":8234,"line_start":204,"line_end":204,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8235,"byte_end":8238,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ When defined, these rules get matched automatically in sequences (`~`) and repetitions","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8239,"byte_end":8329,"line_start":206,"line_end":206,"column_start":1,"column_end":91}},{"value":"/ (`*`, `+`) between expressions. Atomic rules and those rules called by atomic rules are exempt","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8330,"byte_end":8428,"line_start":207,"line_end":207,"column_start":1,"column_end":99}},{"value":"/ from this behavior.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8429,"byte_end":8452,"line_start":208,"line_end":208,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8453,"byte_end":8456,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ These rules should be defined so as to match one whitespace character and one comment only since","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8457,"byte_end":8557,"line_start":210,"line_end":210,"column_start":1,"column_end":101}},{"value":"/ they are run in repetitions.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8558,"byte_end":8590,"line_start":211,"line_end":211,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8591,"byte_end":8594,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ If both `WHITESPACE` and `COMMENT` are defined, this grammar:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8595,"byte_end":8660,"line_start":213,"line_end":213,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8661,"byte_end":8664,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8665,"byte_end":8678,"line_start":215,"line_end":215,"column_start":1,"column_end":14}},{"value":"/ a = { b ~ c }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8679,"byte_end":8696,"line_start":216,"line_end":216,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8697,"byte_end":8704,"line_start":217,"line_end":217,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8705,"byte_end":8708,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ is effectively transformed into this one behind the scenes:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8709,"byte_end":8772,"line_start":219,"line_end":219,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8773,"byte_end":8776,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8777,"byte_end":8790,"line_start":221,"line_end":221,"column_start":1,"column_end":14}},{"value":"/ a = { b ~ WHITESPACE* ~ (COMMENT ~ WHITESPACE*)* ~ c }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8791,"byte_end":8849,"line_start":222,"line_end":222,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8850,"byte_end":8857,"line_start":223,"line_end":223,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8858,"byte_end":8861,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ ## `PUSH`, `POP`, `DROP`, and `PEEK`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8862,"byte_end":8902,"line_start":225,"line_end":225,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8903,"byte_end":8906,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ `PUSH(e)` simply pushes the captured string of the expression `e` down a stack. This stack can","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":8907,"byte_end":9005,"line_start":227,"line_end":227,"column_start":1,"column_end":99}},{"value":"/ then later be used to match grammar based on its content with `POP` and `PEEK`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9006,"byte_end":9089,"line_start":228,"line_end":228,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9090,"byte_end":9093,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ `PEEK` always matches the string at the top of stack. So, if the stack contains `[\"b\", \"a\"]`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9094,"byte_end":9190,"line_start":230,"line_end":230,"column_start":1,"column_end":97}},{"value":"/ (`\"a\"` being on top), this grammar:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9191,"byte_end":9230,"line_start":231,"line_end":231,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9231,"byte_end":9234,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9235,"byte_end":9248,"line_start":233,"line_end":233,"column_start":1,"column_end":14}},{"value":"/ a = { PEEK }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9249,"byte_end":9265,"line_start":234,"line_end":234,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9266,"byte_end":9273,"line_start":235,"line_end":235,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9274,"byte_end":9277,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ is effectively transformed into at parse time:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9278,"byte_end":9328,"line_start":237,"line_end":237,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9329,"byte_end":9332,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9333,"byte_end":9346,"line_start":239,"line_end":239,"column_start":1,"column_end":14}},{"value":"/ a = { \"a\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9347,"byte_end":9362,"line_start":240,"line_end":240,"column_start":1,"column_end":16}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9363,"byte_end":9370,"line_start":241,"line_end":241,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9371,"byte_end":9374,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ `POP` works the same way with the exception that it pops the string off of the stack if the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9375,"byte_end":9470,"line_start":243,"line_end":243,"column_start":1,"column_end":96}},{"value":"/ match worked. With the stack from above, if `POP` matches `\"a\"`, the stack will be mutated","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9471,"byte_end":9565,"line_start":244,"line_end":244,"column_start":1,"column_end":95}},{"value":"/ to `[\"b\"]`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9566,"byte_end":9581,"line_start":245,"line_end":245,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9582,"byte_end":9585,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ `DROP` makes it possible to remove the string at the top of the stack","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9586,"byte_end":9659,"line_start":247,"line_end":247,"column_start":1,"column_end":74}},{"value":"/ without matching it. If the stack is nonempty, `DROP` drops the top of the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9660,"byte_end":9738,"line_start":248,"line_end":248,"column_start":1,"column_end":79}},{"value":"/ stack. If the stack is empty, then `DROP` fails to match.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9739,"byte_end":9800,"line_start":249,"line_end":249,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9801,"byte_end":9804,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ ### Advanced peeking","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9805,"byte_end":9829,"line_start":251,"line_end":251,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9830,"byte_end":9833,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ `PEEK[start..end]` and `PEEK_ALL` allow to peek deeper into the stack. The syntax works exactly","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9834,"byte_end":9933,"line_start":253,"line_end":253,"column_start":1,"column_end":100}},{"value":"/ like Rust’s exclusive slice syntax. Additionally, negative indices can be used to indicate an","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":9934,"byte_end":10033,"line_start":254,"line_end":254,"column_start":1,"column_end":98}},{"value":"/ offset from the top. If the end lies before or at the start, the expression matches (as does","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10034,"byte_end":10130,"line_start":255,"line_end":255,"column_start":1,"column_end":97}},{"value":"/ a `PEEK_ALL` on an empty stack). With the stack `[\"c\", \"b\", \"a\"]` (`\"a\"` on top):","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10131,"byte_end":10216,"line_start":256,"line_end":256,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10217,"byte_end":10220,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10221,"byte_end":10234,"line_start":258,"line_end":258,"column_start":1,"column_end":14}},{"value":"/ fill = PUSH(\"c\") ~ PUSH(\"b\") ~ PUSH(\"a\")","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10235,"byte_end":10279,"line_start":259,"line_end":259,"column_start":1,"column_end":45}},{"value":"/ v = { PEEK_ALL } = { \"a\" ~ \"b\" ~ \"c\" }  // top to bottom","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10280,"byte_end":10340,"line_start":260,"line_end":260,"column_start":1,"column_end":61}},{"value":"/ w = { PEEK[..] } = { \"c\" ~ \"b\" ~ \"a\" }  // bottom to top","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10341,"byte_end":10401,"line_start":261,"line_end":261,"column_start":1,"column_end":61}},{"value":"/ x = { PEEK[1..2] } = { PEEK[1..-1] } = { \"b\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10402,"byte_end":10452,"line_start":262,"line_end":262,"column_start":1,"column_end":51}},{"value":"/ y = { PEEK[..-2] } = { PEEK[0..1] } = { \"a\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10453,"byte_end":10502,"line_start":263,"line_end":263,"column_start":1,"column_end":50}},{"value":"/ z = { PEEK[1..] } = { PEEK[-2..3] } = { \"c\" ~ \"b\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10503,"byte_end":10558,"line_start":264,"line_end":264,"column_start":1,"column_end":56}},{"value":"/ n = { PEEK[2..-2] } = { PEEK[2..1] } = { \"\" }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10559,"byte_end":10608,"line_start":265,"line_end":265,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10609,"byte_end":10616,"line_start":266,"line_end":266,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10617,"byte_end":10620,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ For historical reasons, `PEEK_ALL` matches from top to bottom, while `PEEK[start..end]` matches","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10621,"byte_end":10720,"line_start":268,"line_end":268,"column_start":1,"column_end":100}},{"value":"/ from bottom to top. There is currectly no syntax to match a slice of the stack top to bottom.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10721,"byte_end":10818,"line_start":269,"line_end":269,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10819,"byte_end":10822,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ ## `Rule`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10823,"byte_end":10836,"line_start":271,"line_end":271,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10837,"byte_end":10840,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ All rules defined or used in the grammar populate a generated `enum` called `Rule`. This","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10841,"byte_end":10933,"line_start":273,"line_end":273,"column_start":1,"column_end":93}},{"value":"/ implements `pest`'s `RuleType` and can be used throughout the API.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":10934,"byte_end":11004,"line_start":274,"line_end":274,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11005,"byte_end":11008,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ ## `Built-in rules`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11009,"byte_end":11032,"line_start":276,"line_end":276,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11033,"byte_end":11036,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ Pest also comes with a number of built-in rules for convenience. They are:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11037,"byte_end":11115,"line_start":278,"line_end":278,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11116,"byte_end":11119,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ * `ASCII_DIGIT` - matches a numeric character from 0..9","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11120,"byte_end":11179,"line_start":280,"line_end":280,"column_start":1,"column_end":60}},{"value":"/ * `ASCII_NONZERO_DIGIT` - matches a numeric character from 1..9","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11180,"byte_end":11247,"line_start":281,"line_end":281,"column_start":1,"column_end":68}},{"value":"/ * `ASCII_BIN_DIGIT` - matches a numeric character from 0..1","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11248,"byte_end":11311,"line_start":282,"line_end":282,"column_start":1,"column_end":64}},{"value":"/ * `ASCII_OCT_DIGIT` - matches a numeric character from 0..7","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11312,"byte_end":11375,"line_start":283,"line_end":283,"column_start":1,"column_end":64}},{"value":"/ * `ASCII_HEX_DIGIT` - matches a numeric character from 0..9 or a..f or A..F","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11376,"byte_end":11455,"line_start":284,"line_end":284,"column_start":1,"column_end":80}},{"value":"/ * `ASCII_ALPHA_LOWER` - matches a character from a..z","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11456,"byte_end":11513,"line_start":285,"line_end":285,"column_start":1,"column_end":58}},{"value":"/ * `ASCII_ALPHA_UPPER` - matches a character from A..Z","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11514,"byte_end":11571,"line_start":286,"line_end":286,"column_start":1,"column_end":58}},{"value":"/ * `ASCII_ALPHA` - matches a character from a..z or A..Z","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11572,"byte_end":11631,"line_start":287,"line_end":287,"column_start":1,"column_end":60}},{"value":"/ * `ASCII_ALPHANUMERIC` - matches a character from a..z or A..Z or 0..9","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11632,"byte_end":11706,"line_start":288,"line_end":288,"column_start":1,"column_end":75}},{"value":"/ * `ASCII` - matches a character from \\x00..\\x7f","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11707,"byte_end":11758,"line_start":289,"line_end":289,"column_start":1,"column_end":52}},{"value":"/ * `NEWLINE` - matches either \"\\n\" or \"\\r\\n\" or \"\\r\"","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11759,"byte_end":11814,"line_start":290,"line_end":290,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":12029,"byte_end":12042,"line_start":299,"line_end":299,"column_start":8,"column_end":21},"name":"derive_parser","qualname":"::derive_parser","value":"pub fn derive_parser(TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"proc_macro_derive(Parser, attributes(grammar, grammar_inline))","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pest_derive-2.2.1\\src\\lib.rs","byte_start":11956,"byte_end":12021,"line_start":298,"line_end":298,"column_start":1,"column_end":66}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}