{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1","program":"C:\\Users\\admin\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","indexmap","--edition=2021","C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"serde\"","-C","metadata=c6c18805ad232563","-C","extra-filename=-c6c18805ad232563","--out-dir","f:\\sea-orm-demo\\axum_examples\\async-graphql\\target\\rls\\debug\\deps","-L","dependency=f:\\sea-orm-demo\\axum_examples\\async-graphql\\target\\rls\\debug\\deps","--extern","hashbrown=f:\\sea-orm-demo\\axum_examples\\async-graphql\\target\\rls\\debug\\deps\\libhashbrown-4a76d426fa342544.rmeta","--extern","serde=f:\\sea-orm-demo\\axum_examples\\async-graphql\\target\\rls\\debug\\deps\\libserde-73533c72990ca6b9.rmeta","--cap-lints","allow","--cfg","has_std","--error-format=json","--sysroot","C:\\Users\\admin\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"f:\\sea-orm-demo\\axum_examples\\async-graphql\\target\\rls\\debug\\deps\\libindexmap-c6c18805ad232563.rmeta"},"prelude":{"crate_id":{"name":"indexmap","disambiguator":[14725955131481441365,0]},"crate_root":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src","external_crates":[{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":5,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","num":16,"id":{"name":"serde","disambiguator":[1274656768426680720,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","num":17,"id":{"name":"serde_derive","disambiguator":[15781025730644043985,0]}},{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","num":18,"id":{"name":"hashbrown","disambiguator":[13910213752000888048,0]}}],"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":92,"byte_end":5459,"line_start":2,"line_end":193,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":98649,"byte_end":98662,"line_start":598,"line_end":598,"column_start":20,"column_end":33},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":276}},{"kind":"Use","ref_id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":21733,"byte_end":21744,"line_start":6,"line_end":6,"column_start":30,"column_end":41},"alias_span":null,"name":"MutableKeys","value":"","parent":{"krate":0,"index":275}},{"kind":"Use","ref_id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22292,"byte_end":22297,"line_start":27,"line_end":27,"column_start":22,"column_end":27},"alias_span":null,"name":"Entry","value":"","parent":{"krate":0,"index":275}},{"kind":"Use","ref_id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22299,"byte_end":22312,"line_start":27,"line_end":27,"column_start":29,"column_end":42},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":275}},{"kind":"Use","ref_id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22314,"byte_end":22325,"line_start":27,"line_end":27,"column_start":44,"column_end":55},"alias_span":null,"name":"VacantEntry","value":"","parent":{"krate":0,"index":275}},{"kind":"Use","ref_id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":3606,"byte_end":3616,"line_start":109,"line_end":109,"column_start":28,"column_end":38},"alias_span":null,"name":"Equivalent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":3638,"byte_end":3646,"line_start":110,"line_end":110,"column_start":21,"column_end":29},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1121},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":3668,"byte_end":3676,"line_start":111,"line_end":111,"column_start":21,"column_end":29},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":92,"byte_end":5459,"line_start":2,"line_end":193,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":18},{"krate":0,"index":29},{"krate":0,"index":64},{"krate":0,"index":191},{"krate":0,"index":258},{"krate":0,"index":275},{"krate":0,"index":1056},{"krate":0,"index":1520},{"krate":0,"index":1523},{"krate":0,"index":1526},{"krate":0,"index":1663},{"krate":0,"index":1666},{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1671},{"krate":0,"index":1672},{"krate":0,"index":1529},{"krate":0,"index":1675},{"krate":0,"index":1681},{"krate":0,"index":1684},{"krate":0,"index":1531},{"krate":0,"index":1536},{"krate":0,"index":1548}],"decl_id":null,"docs":" [`IndexMap`] is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.","sig":null,"attributes":[{"value":"deny(unsafe_code)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":92,"byte_end":113,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":114,"byte_end":140,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":196,"byte_end":206,"line_start":5,"line_end":5,"column_start":1,"column_end":11}},{"value":"/ [`IndexMap`] is a hash table where the iteration order of the key-value","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":208,"byte_end":283,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":284,"byte_end":340,"line_start":8,"line_end":8,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":341,"byte_end":344,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`] is a corresponding hash set using the same implementation and","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":345,"byte_end":423,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ with similar properties.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":424,"byte_end":452,"line_start":11,"line_end":11,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":453,"byte_end":456,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: map/struct.IndexMap.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":457,"byte_end":499,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/ [`IndexSet`]: set/struct.IndexSet.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":500,"byte_end":542,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":543,"byte_end":546,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":547,"byte_end":550,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ### Feature Highlights","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":551,"byte_end":577,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":578,"byte_end":581,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] are drop-in compatible with the std `HashMap`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":582,"byte_end":661,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ and `HashSet`, but they also have some features of note:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":662,"byte_end":722,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":723,"byte_end":726,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ - The ordering semantics (see their documentation for details)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":727,"byte_end":793,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/ - Sorting methods and the [`.pop()`][IndexMap::pop] methods.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":794,"byte_end":858,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/ - The [`Equivalent`] trait, which offers more flexible equality definitions","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":859,"byte_end":938,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/   between borrowed and owned versions of keys.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":939,"byte_end":989,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"/ - The [`MutableKeys`][map::MutableKeys] trait, which gives opt-in mutable","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":990,"byte_end":1067,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/   access to hash map keys.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1068,"byte_end":1098,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1099,"byte_end":1102,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ### Alternate Hashers","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1103,"byte_end":1128,"line_start":29,"line_end":29,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1129,"byte_end":1132,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] have a default hasher type `S = RandomState`,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1133,"byte_end":1212,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ just like the standard `HashMap` and `HashSet`, which is resistant to","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1213,"byte_end":1286,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ HashDoS attacks but not the most performant. Type aliases can make it easier","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1287,"byte_end":1367,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ to use alternate hashers:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1368,"byte_end":1397,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1398,"byte_end":1401,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1402,"byte_end":1409,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use fnv::FnvBuildHasher;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1410,"byte_end":1438,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ use fxhash::FxBuildHasher;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1439,"byte_end":1469,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/ use indexmap::{IndexMap, IndexSet};","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1470,"byte_end":1509,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1510,"byte_end":1513,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ type FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1514,"byte_end":1574,"line_start":41,"line_end":41,"column_start":1,"column_end":61}},{"value":"/ type FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1575,"byte_end":1629,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1630,"byte_end":1633,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ type FxIndexMap<K, V> = IndexMap<K, V, FxBuildHasher>;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1634,"byte_end":1692,"line_start":44,"line_end":44,"column_start":1,"column_end":59}},{"value":"/ type FxIndexSet<T> = IndexSet<T, FxBuildHasher>;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1693,"byte_end":1745,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1746,"byte_end":1749,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let std: IndexSet<i32> = (0..100).collect();","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1750,"byte_end":1798,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ let fnv: FnvIndexSet<i32> = (0..100).collect();","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1799,"byte_end":1850,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/ let fx: FxIndexSet<i32> = (0..100).collect();","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1851,"byte_end":1900,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(std, fnv);","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1901,"byte_end":1926,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(std, fx);","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1927,"byte_end":1951,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1952,"byte_end":1959,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1960,"byte_end":1963,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ### Rust Version","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1964,"byte_end":1984,"line_start":54,"line_end":54,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1985,"byte_end":1988,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This version of indexmap requires Rust 1.56 or later.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":1989,"byte_end":2046,"line_start":56,"line_end":56,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2047,"byte_end":2050,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ The indexmap 1.x release series will use a carefully considered version","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2051,"byte_end":2126,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ upgrade policy, where in a later 1.x version, we will raise the minimum","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2127,"byte_end":2202,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ required Rust version.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2203,"byte_end":2229,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2230,"byte_end":2233,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## No Standard Library Targets","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2234,"byte_end":2268,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2269,"byte_end":2272,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This crate supports being built without `std`, requiring","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2273,"byte_end":2333,"line_start":64,"line_end":64,"column_start":1,"column_end":61}},{"value":"/ `alloc` instead. This is enabled automatically when it is detected that","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2334,"byte_end":2409,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ `std` is not available. There is no crate feature to enable/disable to","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2410,"byte_end":2484,"line_start":66,"line_end":66,"column_start":1,"column_end":75}},{"value":"/ trigger this. It can be tested by building for a std-less target.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2485,"byte_end":2554,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2555,"byte_end":2558,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ - Creating maps and sets using [`new`][IndexMap::new] and","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2559,"byte_end":2620,"line_start":69,"line_end":69,"column_start":1,"column_end":62}},{"value":"/ [`with_capacity`][IndexMap::with_capacity] is unavailable without `std`.  ","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2621,"byte_end":2699,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   Use methods [`IndexMap::default`][def],","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2700,"byte_end":2745,"line_start":71,"line_end":71,"column_start":1,"column_end":46}},{"value":"/   [`with_hasher`][IndexMap::with_hasher],","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2746,"byte_end":2791,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/   [`with_capacity_and_hasher`][IndexMap::with_capacity_and_hasher] instead.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2792,"byte_end":2871,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   A no-std compatible hasher will be needed as well, for example","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2872,"byte_end":2940,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/   from the crate `twox-hash`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2941,"byte_end":2974,"line_start":75,"line_end":75,"column_start":1,"column_end":34}},{"value":"/ - Macros [`indexmap!`] and [`indexset!`] are unavailable without `std`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":2975,"byte_end":3050,"line_start":76,"line_end":76,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":3051,"byte_end":3054,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ [def]: map/struct.IndexMap.html#impl-Default","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":3055,"byte_end":3103,"line_start":78,"line_end":78,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":11026,"byte_end":11036,"line_start":13,"line_end":13,"column_start":11,"column_end":21},"name":"Equivalent","qualname":"::equivalent::Equivalent","value":"Equivalent<K: ?Sized>","parent":null,"children":[{"krate":0,"index":24}],"decl_id":null,"docs":" Key equivalence trait.","sig":null,"attributes":[{"value":"/ Key equivalence trait.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":10636,"byte_end":10662,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":10663,"byte_end":10666,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This trait allows hash table lookup to be customized.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":10667,"byte_end":10724,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ It has one blanket implementation that uses the regular `Borrow` solution,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":10725,"byte_end":10803,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ just like `HashMap` and `BTreeMap` do, so that you can pass `&str` to lookup","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":10804,"byte_end":10884,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ into a map with `String` keys and so on.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":10885,"byte_end":10929,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":10930,"byte_end":10933,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Contract","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":10934,"byte_end":10948,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":10949,"byte_end":10952,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The implementor **must** hash like `K`, if it is hashable.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":10953,"byte_end":11015,"line_start":12,"line_end":12,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":11124,"byte_end":11134,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"equivalent","qualname":"::equivalent::Equivalent::equivalent","value":"pub fn equivalent(&Self, &K) -> bool","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Compare self to `key` and return `true` if they are equal.\n","sig":null,"attributes":[{"value":"/ Compare self to `key` and return `true` if they are equal.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":11054,"byte_end":11116,"line_start":14,"line_end":14,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11430,"byte_end":11443,"line_start":5,"line_end":5,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::mutable_keys::PrivateMarker","value":"PrivateMarker {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11993,"byte_end":12004,"line_start":19,"line_end":19,"column_start":11,"column_end":22},"name":"MutableKeys","qualname":"::mutable_keys::MutableKeys","value":"MutableKeys","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52}],"decl_id":null,"docs":" Opt-in mutable access to keys.","sig":null,"attributes":[{"value":"/ Opt-in mutable access to keys.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11448,"byte_end":11482,"line_start":7,"line_end":7,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11483,"byte_end":11486,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ These methods expose `&mut K`, mutable references to the key as it is stored","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11487,"byte_end":11567,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ in the map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11568,"byte_end":11583,"line_start":10,"line_end":10,"column_start":1,"column_end":16}},{"value":"/ You are allowed to modify the keys in the hashmap **if the modification","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11584,"byte_end":11659,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ does not change the key’s hash and equality**.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11660,"byte_end":11712,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11713,"byte_end":11716,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ If keys are modified erroneously, you can no longer look them up.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11717,"byte_end":11786,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/ This is sound (memory safe) but a logical error hazard (just like","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11787,"byte_end":11856,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ implementing PartialEq, Eq, or Hash incorrectly would be).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11857,"byte_end":11919,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11920,"byte_end":11923,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `use` this trait to enable its methods for `IndexMap`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":11924,"byte_end":11982,"line_start":18,"line_end":18,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12016,"byte_end":12019,"line_start":20,"line_end":20,"column_start":10,"column_end":13},"name":"Key","qualname":"::mutable_keys::MutableKeys::Key","value":"type Key;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12030,"byte_end":12035,"line_start":21,"line_end":21,"column_start":10,"column_end":15},"name":"Value","qualname":"::mutable_keys::MutableKeys::Value","value":"type Value;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12107,"byte_end":12120,"line_start":24,"line_end":24,"column_start":8,"column_end":21},"name":"get_full_mut2","qualname":"::mutable_keys::MutableKeys::get_full_mut2","value":"pub fn get_full_mut2<Q: ?Sized>(&mut Self, &Q)\n-> Option<(usize, &mut Self::Key, &mut Self::Value)> where Q: Hash +\nEquivalent<Self::Key>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Return item index, mutable reference to key and value\n","sig":null,"attributes":[{"value":"/ Return item index, mutable reference to key and value","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12042,"byte_end":12099,"line_start":23,"line_end":23,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12556,"byte_end":12563,"line_start":38,"line_end":38,"column_start":8,"column_end":15},"name":"retain2","qualname":"::mutable_keys::MutableKeys::retain2","value":"pub fn retain2<F>(&mut Self, F) where\nF: FnMut(&mut Self::Key, &mut Self::Value) -> bool","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12284,"byte_end":12356,"line_start":31,"line_end":31,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12361,"byte_end":12395,"line_start":32,"line_end":32,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12400,"byte_end":12403,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12408,"byte_end":12480,"line_start":34,"line_end":34,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12485,"byte_end":12495,"line_start":35,"line_end":35,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12500,"byte_end":12503,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12508,"byte_end":12548,"line_start":37,"line_end":37,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12855,"byte_end":12871,"line_start":45,"line_end":45,"column_start":8,"column_end":24},"name":"__private_marker","qualname":"::mutable_keys::MutableKeys::__private_marker","value":"pub fn __private_marker(&Self) -> PrivateMarker","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" This method is not useful in itself – it is there to “seal” the trait\n for external implementation, so that we can add methods without\n causing breaking changes.\n","sig":null,"attributes":[{"value":"/ This method is not useful in itself – it is there to “seal” the trait","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12662,"byte_end":12741,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ for external implementation, so that we can add methods without","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12746,"byte_end":12813,"line_start":43,"line_end":43,"column_start":5,"column_end":72}},{"value":"/ causing breaking changes.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":12818,"byte_end":12847,"line_start":44,"line_end":44,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serde_seq","qualname":"::serde_seq","value":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":237},{"krate":0,"index":243},{"krate":0,"index":252}],"decl_id":null,"docs":" Functions to serialize and deserialize an `IndexMap` as an ordered sequence.","sig":null,"attributes":[{"value":"cfg(feature = \"serde\")","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":3300,"byte_end":3325,"line_start":94,"line_end":94,"column_start":1,"column_end":26}},{"value":"/ Functions to serialize and deserialize an `IndexMap` as an ordered sequence.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17444,"byte_end":17524,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17525,"byte_end":17528,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The default `serde` implementation serializes `IndexMap` as a normal map,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17529,"byte_end":17606,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ but there is no guarantee that serialization formats will preserve the order","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17607,"byte_end":17687,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"/ of the key-value pairs. This module serializes `IndexMap` as a sequence of","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17688,"byte_end":17766,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ `(key, value)` elements instead, in order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17767,"byte_end":17813,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17814,"byte_end":17817,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This module may be used in a field attribute for derived implementations:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17818,"byte_end":17895,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17896,"byte_end":17899,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17900,"byte_end":17907,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ # use indexmap::IndexMap;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17908,"byte_end":17937,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17938,"byte_end":17987,"line_start":12,"line_end":12,"column_start":1,"column_end":50}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":17988,"byte_end":18025,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/ struct Data {","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18026,"byte_end":18043,"line_start":14,"line_end":14,"column_start":1,"column_end":18}},{"value":"/     #[serde(with = \"indexmap::serde_seq\")]","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18044,"byte_end":18090,"line_start":15,"line_end":15,"column_start":1,"column_end":47}},{"value":"/     map: IndexMap<i32, u64>,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18091,"byte_end":18123,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/     // ...","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18124,"byte_end":18138,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18139,"byte_end":18144,"line_start":18,"line_end":18,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18145,"byte_end":18152,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18153,"byte_end":18156,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Requires crate feature `\"serde\"` or `\"serde-1\"`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18157,"byte_end":18208,"line_start":21,"line_end":21,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18888,"byte_end":18897,"line_start":48,"line_end":48,"column_start":8,"column_end":17},"name":"serialize","qualname":"::serde_seq::serialize","value":"pub fn serialize<K, V, S, T>(&IndexMap<K, V, S>, T) -> Result<T::Ok, T::Error>\nwhere K: Serialize + Hash + Eq, V: Serialize, S: BuildHasher, T: Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serializes an `IndexMap` as an ordered sequence.","sig":null,"attributes":[{"value":"/ Serializes an `IndexMap` as an ordered sequence.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18441,"byte_end":18493,"line_start":32,"line_end":32,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18494,"byte_end":18497,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This function may be used in a field attribute for deriving `Serialize`:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18498,"byte_end":18574,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18575,"byte_end":18578,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18579,"byte_end":18586,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use indexmap::IndexMap;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18587,"byte_end":18616,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18617,"byte_end":18651,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18652,"byte_end":18676,"line_start":39,"line_end":39,"column_start":1,"column_end":25}},{"value":"/ struct Data {","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18677,"byte_end":18694,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/     #[serde(serialize_with = \"indexmap::serde_seq::serialize\")]","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18695,"byte_end":18762,"line_start":41,"line_end":41,"column_start":1,"column_end":68}},{"value":"/     map: IndexMap<i32, u64>,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18763,"byte_end":18795,"line_start":42,"line_end":42,"column_start":1,"column_end":33}},{"value":"/     // ...","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18796,"byte_end":18810,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18811,"byte_end":18816,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18817,"byte_end":18824,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18825,"byte_end":18828,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Requires crate feature `\"serde\"` or `\"serde-1\"`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":18829,"byte_end":18880,"line_start":47,"line_end":47,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20373,"byte_end":20384,"line_start":104,"line_end":104,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::serde_seq::deserialize","value":"pub fn deserialize<'de, D, K, V, S>(D) -> Result<IndexMap<K, V, S>, D::Error>\nwhere D: Deserializer, K: Deserialize + Eq + Hash, V: Deserialize,\nS: Default + BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an `IndexMap` from an ordered sequence.","sig":null,"attributes":[{"value":"/ Deserializes an `IndexMap` from an ordered sequence.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":19912,"byte_end":19968,"line_start":88,"line_end":88,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":19969,"byte_end":19972,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ This function may be used in a field attribute for deriving `Deserialize`:","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":19973,"byte_end":20051,"line_start":90,"line_end":90,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20052,"byte_end":20055,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20056,"byte_end":20063,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ # use indexmap::IndexMap;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20064,"byte_end":20093,"line_start":93,"line_end":93,"column_start":1,"column_end":30}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20094,"byte_end":20130,"line_start":94,"line_end":94,"column_start":1,"column_end":37}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20131,"byte_end":20157,"line_start":95,"line_end":95,"column_start":1,"column_end":27}},{"value":"/ struct Data {","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20158,"byte_end":20175,"line_start":96,"line_end":96,"column_start":1,"column_end":18}},{"value":"/     #[serde(deserialize_with = \"indexmap::serde_seq::deserialize\")]","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20176,"byte_end":20247,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/     map: IndexMap<i32, u64>,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20248,"byte_end":20280,"line_start":98,"line_end":98,"column_start":1,"column_end":33}},{"value":"/     // ...","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20281,"byte_end":20295,"line_start":99,"line_end":99,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20296,"byte_end":20301,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20302,"byte_end":20309,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20310,"byte_end":20313,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Requires crate feature `\"serde\"` or `\"serde-1\"`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":20314,"byte_end":20365,"line_start":103,"line_end":103,"column_start":1,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":275},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":600},{"krate":0,"index":603},{"krate":0,"index":609},{"krate":0,"index":615},{"krate":0,"index":625},{"krate":0,"index":630},{"krate":0,"index":635},{"krate":0,"index":657},{"krate":0,"index":728},{"krate":0,"index":742},{"krate":0,"index":747},{"krate":0,"index":752},{"krate":0,"index":755},{"krate":0,"index":759},{"krate":0,"index":762},{"krate":0,"index":766},{"krate":0,"index":770},{"krate":0,"index":774},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":785},{"krate":0,"index":788},{"krate":0,"index":792},{"krate":0,"index":797},{"krate":0,"index":802},{"krate":0,"index":805},{"krate":0,"index":809},{"krate":0,"index":812},{"krate":0,"index":816},{"krate":0,"index":820},{"krate":0,"index":825},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":844},{"krate":0,"index":848},{"krate":0,"index":852},{"krate":0,"index":855},{"krate":0,"index":859},{"krate":0,"index":862},{"krate":0,"index":866},{"krate":0,"index":871},{"krate":0,"index":876},{"krate":0,"index":879},{"krate":0,"index":883},{"krate":0,"index":886},{"krate":0,"index":890},{"krate":0,"index":894},{"krate":0,"index":899},{"krate":0,"index":904},{"krate":0,"index":907},{"krate":0,"index":911},{"krate":0,"index":914},{"krate":0,"index":918},{"krate":0,"index":922},{"krate":0,"index":926},{"krate":0,"index":929},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":940},{"krate":0,"index":945},{"krate":0,"index":949},{"krate":0,"index":952},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":963},{"krate":0,"index":971},{"krate":0,"index":979},{"krate":0,"index":986},{"krate":0,"index":993},{"krate":0,"index":999},{"krate":0,"index":1005},{"krate":0,"index":1010},{"krate":0,"index":1016},{"krate":0,"index":1023},{"krate":0,"index":1030},{"krate":0,"index":1038},{"krate":0,"index":1043},{"krate":0,"index":1052}],"decl_id":null,"docs":" `IndexMap` is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.\n","sig":null,"attributes":[{"value":"/ `IndexMap` is a hash table where the iteration order of the key-value","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":21561,"byte_end":21634,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":21635,"byte_end":21691,"line_start":2,"line_end":2,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":105948,"byte_end":105961,"line_start":108,"line_end":108,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::core::raw::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334}],"decl_id":null,"docs":" A view into an occupied entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `IndexMap`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":105676,"byte_end":105726,"line_start":102,"line_end":102,"column_start":1,"column_end":51}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":105727,"byte_end":105764,"line_start":103,"line_end":103,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":105765,"byte_end":105768,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":105769,"byte_end":105799,"line_start":105,"line_end":105,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106692,"byte_end":106695,"line_start":125,"line_end":125,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's key in the map.","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's key in the map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106362,"byte_end":106413,"line_start":120,"line_end":120,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106418,"byte_end":106421,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Note that this is not the key that was used to find the entry. There may be an observable","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106426,"byte_end":106519,"line_start":122,"line_end":122,"column_start":5,"column_end":98}},{"value":"/ difference if the key type has any distinguishing features outside of `Hash` and `Eq`, like","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106524,"byte_end":106619,"line_start":123,"line_end":123,"column_start":5,"column_end":100}},{"value":"/ extra fields or the memory address of an allocation.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106624,"byte_end":106680,"line_start":124,"line_end":124,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106831,"byte_end":106834,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's value in the map.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's value in the map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106766,"byte_end":106819,"line_start":129,"line_end":129,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":107100,"byte_end":107107,"line_start":138,"line_end":138,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the entry's value in the map.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the entry's value in the map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106907,"byte_end":106968,"line_start":134,"line_end":134,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106973,"byte_end":106976,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ If you need a reference which may outlive the destruction of the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106981,"byte_end":107049,"line_start":136,"line_end":136,"column_start":5,"column_end":73}},{"value":"/ `Entry` value, see `into_mut`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":107054,"byte_end":107088,"line_start":137,"line_end":137,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":107519,"byte_end":107524,"line_start":152,"line_end":152,"column_start":12,"column_end":17},"name":"index","qualname":"<OccupiedEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the key-value pair\n","sig":null,"attributes":[{"value":"/ Return the index of the key-value pair","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":107451,"byte_end":107493,"line_start":150,"line_end":150,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":107498,"byte_end":107507,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":107794,"byte_end":107802,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts into a mutable reference to the entry's value in the map,\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts into a mutable reference to the entry's value in the map,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":107663,"byte_end":107733,"line_start":157,"line_end":157,"column_start":5,"column_end":75}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":107738,"byte_end":107782,"line_start":158,"line_end":158,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108264,"byte_end":108281,"line_start":171,"line_end":171,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<OccupiedEntry>::swap_remove_entry","value":"pub fn swap_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":107912,"byte_end":107986,"line_start":164,"line_end":164,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":107991,"byte_end":107994,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":107999,"byte_end":108071,"line_start":166,"line_end":166,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108076,"byte_end":108139,"line_start":167,"line_end":167,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108144,"byte_end":108199,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108204,"byte_end":108207,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108212,"byte_end":108252,"line_start":170,"line_end":170,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108931,"byte_end":108949,"line_start":185,"line_end":185,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<OccupiedEntry>::shift_remove_entry","value":"pub fn shift_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108585,"byte_end":108659,"line_start":178,"line_end":178,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108664,"byte_end":108667,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108672,"byte_end":108738,"line_start":180,"line_end":180,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108743,"byte_end":108804,"line_start":181,"line_end":181,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108809,"byte_end":108866,"line_start":182,"line_end":182,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108871,"byte_end":108874,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":108879,"byte_end":108919,"line_start":184,"line_end":184,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95128,"byte_end":95136,"line_start":494,"line_end":494,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::core::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Existing slot with equivalent key.\n","sig":null,"attributes":[{"value":"/ Existing slot with equivalent key.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95085,"byte_end":95123,"line_start":493,"line_end":493,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95219,"byte_end":95225,"line_start":496,"line_end":496,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::core::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Vacant slot (no equivalent key in the map).\n","sig":null,"attributes":[{"value":"/ Vacant slot (no equivalent key in the map).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95167,"byte_end":95214,"line_start":495,"line_end":495,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95063,"byte_end":95068,"line_start":492,"line_end":492,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::core::Entry","value":"pub enum Entry<'a, K, V> { Occupied(OccupiedEntry), Vacant(VacantEntry), }","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":470}],"decl_id":null,"docs":" Entry for an existing key-value pair or a vacant location to\n insert one.\n","sig":null,"attributes":[{"value":"/ Entry for an existing key-value pair or a vacant location to","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":94973,"byte_end":95037,"line_start":490,"line_end":490,"column_start":1,"column_end":65}},{"value":"/ insert one.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95038,"byte_end":95053,"line_start":491,"line_end":491,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95548,"byte_end":95557,"line_start":504,"line_end":504,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given default value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the given default value in the entry if it is vacant and returns a mutable","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95290,"byte_end":95376,"line_start":500,"line_end":500,"column_start":5,"column_end":91}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95381,"byte_end":95473,"line_start":501,"line_end":501,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95478,"byte_end":95481,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95486,"byte_end":95536,"line_start":503,"line_end":503,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":96016,"byte_end":96030,"line_start":515,"line_end":515,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> &'a mut V where F: FnOnce() -> V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the result of the `call` function in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the result of the `call` function in the entry if it is vacant and returns a mutable","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95748,"byte_end":95844,"line_start":511,"line_end":511,"column_start":5,"column_end":101}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95849,"byte_end":95941,"line_start":512,"line_end":512,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95946,"byte_end":95949,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95954,"byte_end":96004,"line_start":514,"line_end":514,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":96571,"byte_end":96589,"line_start":530,"line_end":530,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"pub fn or_insert_with_key<F>(Self, F) -> &'a mut V where F: FnOnce(&K) -> V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the result of the `call` function with a reference to the entry's key if it is\n vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to\n an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the result of the `call` function with a reference to the entry's key if it is","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":96260,"byte_end":96350,"line_start":525,"line_end":525,"column_start":5,"column_end":95}},{"value":"/ vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":96355,"byte_end":96449,"line_start":526,"line_end":526,"column_start":5,"column_end":99}},{"value":"/ an already existent value is returned.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":96454,"byte_end":96496,"line_start":527,"line_end":527,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":96501,"byte_end":96504,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":96509,"byte_end":96559,"line_start":529,"line_end":529,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":97045,"byte_end":97048,"line_start":545,"line_end":545,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's key, either within the map if occupied,\n or else the new key that was used to find the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's key, either within the map if occupied,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":96897,"byte_end":96972,"line_start":543,"line_end":543,"column_start":5,"column_end":80}},{"value":"/ or else the new key that was used to find the entry.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":96977,"byte_end":97033,"line_start":544,"line_end":544,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":97300,"byte_end":97305,"line_start":553,"line_end":553,"column_start":12,"column_end":17},"name":"index","qualname":"<Entry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair exists or will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair exists or will be inserted.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":97215,"byte_end":97288,"line_start":552,"line_end":552,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":97532,"byte_end":97542,"line_start":561,"line_end":561,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modifies the entry if it is occupied.\n","sig":null,"attributes":[{"value":"/ Modifies the entry if it is occupied.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":97479,"byte_end":97520,"line_start":560,"line_end":560,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":98054,"byte_end":98064,"line_start":578,"line_end":578,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where V: Default","parent":null,"children":[],"decl_id":null,"docs":" Inserts a default-constructed value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts a default-constructed value in the entry if it is vacant and returns a mutable","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":97792,"byte_end":97882,"line_start":574,"line_end":574,"column_start":5,"column_end":95}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":97887,"byte_end":97979,"line_start":575,"line_end":575,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":97984,"byte_end":97987,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":97992,"byte_end":98042,"line_start":577,"line_end":577,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":98859,"byte_end":98865,"line_start":603,"line_end":603,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry to `value`, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry to `value`, and returns the entry's old value.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":98769,"byte_end":98847,"line_start":602,"line_end":602,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99108,"byte_end":99114,"line_start":610,"line_end":610,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":98944,"byte_end":99030,"line_start":607,"line_end":607,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99035,"byte_end":99038,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove()`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99043,"byte_end":99096,"line_start":609,"line_end":609,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99530,"byte_end":99541,"line_start":621,"line_end":621,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<OccupiedEntry>::swap_remove","value":"pub fn swap_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99166,"byte_end":99252,"line_start":614,"line_end":614,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99257,"byte_end":99260,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99265,"byte_end":99337,"line_start":616,"line_end":616,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99342,"byte_end":99405,"line_start":617,"line_end":617,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99410,"byte_end":99465,"line_start":618,"line_end":618,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99470,"byte_end":99473,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99478,"byte_end":99518,"line_start":620,"line_end":620,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99959,"byte_end":99971,"line_start":632,"line_end":632,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<OccupiedEntry>::shift_remove","value":"pub fn shift_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99601,"byte_end":99687,"line_start":625,"line_end":625,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99692,"byte_end":99695,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99700,"byte_end":99766,"line_start":627,"line_end":627,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99771,"byte_end":99832,"line_start":628,"line_end":628,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99837,"byte_end":99894,"line_start":629,"line_end":629,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99899,"byte_end":99902,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":99907,"byte_end":99947,"line_start":631,"line_end":631,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100190,"byte_end":100202,"line_start":639,"line_end":639,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100032,"byte_end":100106,"line_start":636,"line_end":636,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100111,"byte_end":100114,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry()`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100119,"byte_end":100178,"line_start":638,"line_end":638,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100693,"byte_end":100704,"line_start":657,"line_end":657,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::core::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512}],"decl_id":null,"docs":" A view into a vacant entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `IndexMap`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100561,"byte_end":100608,"line_start":653,"line_end":653,"column_start":1,"column_end":48}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100609,"byte_end":100646,"line_start":654,"line_end":654,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100647,"byte_end":100650,"line_start":655,"line_end":655,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100651,"byte_end":100681,"line_start":656,"line_end":656,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100909,"byte_end":100912,"line_start":665,"line_end":665,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that was used to find the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key that was used to find the entry.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100833,"byte_end":100897,"line_start":664,"line_end":664,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":101026,"byte_end":101034,"line_start":670,"line_end":670,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Takes ownership of the key, leaving the entry vacant.\n","sig":null,"attributes":[{"value":"/ Takes ownership of the key, leaving the entry vacant.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100957,"byte_end":101014,"line_start":669,"line_end":669,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":101151,"byte_end":101156,"line_start":675,"line_end":675,"column_start":12,"column_end":17},"name":"index","qualname":"<VacantEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair will be inserted.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":101076,"byte_end":101139,"line_start":674,"line_end":674,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":101336,"byte_end":101342,"line_start":681,"line_end":681,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the entry's key and the given value into the map, and returns a mutable reference\n to the value.\n","sig":null,"attributes":[{"value":"/ Inserts the entry's key and the given value into the map, and returns a mutable reference","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":101209,"byte_end":101302,"line_start":679,"line_end":679,"column_start":5,"column_end":98}},{"value":"/ to the value.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":101307,"byte_end":101324,"line_start":680,"line_end":680,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23765,"byte_end":23773,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::map::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":608}],"decl_id":null,"docs":" A hash table where the iteration order of the key-value pairs is independent\n of the hash values of the keys.","sig":null,"attributes":[{"value":"/ A hash table where the iteration order of the key-value pairs is independent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22329,"byte_end":22409,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ of the hash values of the keys.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22410,"byte_end":22445,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22446,"byte_end":22449,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashMap`, but also","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22450,"byte_end":22527,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22528,"byte_end":22556,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22557,"byte_end":22560,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22561,"byte_end":22572,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22573,"byte_end":22576,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs have a consistent order that is determined by","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22577,"byte_end":22646,"line_start":37,"line_end":37,"column_start":1,"column_end":70}},{"value":"/ the sequence of insertion and removal calls on the map. The order does","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22647,"byte_end":22721,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ not depend on the keys or the hash function at all.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22722,"byte_end":22777,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22778,"byte_end":22781,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the map in *the order*.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22782,"byte_end":22832,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22833,"byte_end":22836,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22837,"byte_end":22911,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22912,"byte_end":22988,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":22989,"byte_end":23054,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23055,"byte_end":23058,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23059,"byte_end":23072,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23073,"byte_end":23076,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs are indexed in a compact range without holes in the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23077,"byte_end":23152,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ range `0..self.len()`. For example, the method `.get_full` looks up the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23153,"byte_end":23228,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ index for a key, and the method `.get_index` looks up the key-value pair by","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23229,"byte_end":23308,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ index.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23309,"byte_end":23319,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23320,"byte_end":23323,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23324,"byte_end":23338,"line_start":54,"line_end":54,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23339,"byte_end":23342,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23343,"byte_end":23350,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexMap;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23351,"byte_end":23378,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23379,"byte_end":23382,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // count the frequency of each letter in a sentence.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23383,"byte_end":23439,"line_start":59,"line_end":59,"column_start":1,"column_end":57}},{"value":"/ let mut letters = IndexMap::new();","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23440,"byte_end":23478,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23479,"byte_end":23530,"line_start":61,"line_end":61,"column_start":1,"column_end":52}},{"value":"/     *letters.entry(ch).or_insert(0) += 1;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23531,"byte_end":23576,"line_start":62,"line_end":62,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23577,"byte_end":23582,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23583,"byte_end":23586,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23587,"byte_end":23620,"line_start":65,"line_end":65,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23621,"byte_end":23654,"line_start":66,"line_end":66,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23655,"byte_end":23688,"line_start":67,"line_end":67,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23689,"byte_end":23729,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23730,"byte_end":23737,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":23738,"byte_end":23753,"line_start":70,"line_end":70,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25501,"byte_end":25504,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new map. (Does not allocate.)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25433,"byte_end":25475,"line_start":145,"line_end":145,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25480,"byte_end":25489,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25731,"byte_end":25744,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexMap<K, V>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25559,"byte_end":25628,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25633,"byte_end":25662,"line_start":152,"line_end":152,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25667,"byte_end":25670,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25675,"byte_end":25705,"line_start":154,"line_end":154,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25710,"byte_end":25719,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26042,"byte_end":26066,"line_start":167,"line_end":167,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25870,"byte_end":25939,"line_start":162,"line_end":162,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25944,"byte_end":25973,"line_start":163,"line_end":163,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25978,"byte_end":25981,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25986,"byte_end":26016,"line_start":165,"line_end":165,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26021,"byte_end":26030,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26478,"byte_end":26489,"line_start":182,"line_end":182,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<IndexMap<K, V, S>>::with_hasher","value":"pub const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with `hash_builder`.","sig":null,"attributes":[{"value":"/ Create a new map with `hash_builder`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26327,"byte_end":26368,"line_start":178,"line_end":178,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26373,"byte_end":26376,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ This function is `const`, so it","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26381,"byte_end":26416,"line_start":180,"line_end":180,"column_start":5,"column_end":40}},{"value":"/ can be called in `static` contexts.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26421,"byte_end":26460,"line_start":181,"line_end":181,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26664,"byte_end":26672,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26622,"byte_end":26652,"line_start":189,"line_end":189,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26793,"byte_end":26799,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexMap<K, V, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the map's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the map's `BuildHasher`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26731,"byte_end":26781,"line_start":194,"line_end":194,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26974,"byte_end":26977,"line_start":203,"line_end":203,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Return the number of key-value pairs in the map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26853,"byte_end":26905,"line_start":199,"line_end":199,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26910,"byte_end":26913,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26918,"byte_end":26948,"line_start":201,"line_end":201,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":26953,"byte_end":26962,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27149,"byte_end":27157,"line_start":211,"line_end":211,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27031,"byte_end":27080,"line_start":207,"line_end":207,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27085,"byte_end":27088,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27093,"byte_end":27123,"line_start":209,"line_end":209,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27128,"byte_end":27137,"line_start":210,"line_end":210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27296,"byte_end":27300,"line_start":216,"line_end":216,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27210,"byte_end":27284,"line_start":215,"line_end":215,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27494,"byte_end":27502,"line_start":223,"line_end":223,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27408,"byte_end":27482,"line_start":222,"line_end":222,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27703,"byte_end":27707,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, S>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the map, in their order","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27628,"byte_end":27691,"line_start":229,"line_end":229,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27897,"byte_end":27906,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"into_keys","qualname":"<IndexMap<K, V, S>>::into_keys","value":"pub fn into_keys(Self) -> IntoKeys<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an owning iterator over the keys of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an owning iterator over the keys of the map, in their order","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":27815,"byte_end":27885,"line_start":236,"line_end":236,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28101,"byte_end":28107,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, S>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the map, in their order","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28024,"byte_end":28089,"line_start":243,"line_end":243,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28326,"byte_end":28336,"line_start":252,"line_end":252,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, S>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the values of the map,\n in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over mutable references to the values of the map,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28219,"byte_end":28291,"line_start":250,"line_end":250,"column_start":5,"column_end":77}},{"value":"/ in their order","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28296,"byte_end":28314,"line_start":251,"line_end":251,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28550,"byte_end":28561,"line_start":259,"line_end":259,"column_start":12,"column_end":23},"name":"into_values","qualname":"<IndexMap<K, V, S>>::into_values","value":"pub fn into_values(Self) -> IntoValues<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an owning iterator over the values of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an owning iterator over the values of the map, in their order","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28466,"byte_end":28538,"line_start":258,"line_end":258,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28811,"byte_end":28816,"line_start":268,"line_end":268,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all key-value pairs in the map, while preserving its capacity.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28683,"byte_end":28756,"line_start":265,"line_end":265,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28761,"byte_end":28764,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28769,"byte_end":28799,"line_start":267,"line_end":267,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29044,"byte_end":29052,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"truncate","qualname":"<IndexMap<K, V, S>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the map, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the map, keeping the first `len` elements and dropping the rest.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28868,"byte_end":28945,"line_start":272,"line_end":272,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28950,"byte_end":28953,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the map's current length, this has no effect.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":28958,"byte_end":29032,"line_start":274,"line_end":274,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29804,"byte_end":29809,"line_start":292,"line_end":292,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexMap<K, V, S>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, K, V> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexMap` in the given index range, returning those\n key-value pairs as a drain iterator.","sig":null,"attributes":[{"value":"/ Clears the `IndexMap` in the given index range, returning those","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29122,"byte_end":29189,"line_start":279,"line_end":279,"column_start":5,"column_end":72}},{"value":"/ key-value pairs as a drain iterator.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29194,"byte_end":29234,"line_start":280,"line_end":280,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29239,"byte_end":29242,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ The range may be any type that implements `RangeBounds<usize>`,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29247,"byte_end":29314,"line_start":282,"line_end":282,"column_start":5,"column_end":72}},{"value":"/ including all of the `std::ops::Range*` types, or even a tuple pair of","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29319,"byte_end":29393,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ `Bound` start and end values. To drain the map entirely, use `RangeFull`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29398,"byte_end":29474,"line_start":284,"line_end":284,"column_start":5,"column_end":81}},{"value":"/ like `map.drain(..)`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29479,"byte_end":29504,"line_start":285,"line_end":285,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29509,"byte_end":29512,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This shifts down all entries following the drained range to fill the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29517,"byte_end":29589,"line_start":287,"line_end":287,"column_start":5,"column_end":77}},{"value":"/ gap, and keeps the allocated memory for reuse.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29594,"byte_end":29644,"line_start":288,"line_end":288,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29649,"byte_end":29652,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the starting point is greater than the end point or if","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29657,"byte_end":29731,"line_start":290,"line_end":290,"column_start":5,"column_end":79}},{"value":"/ the end point is greater than the length of the map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29736,"byte_end":29792,"line_start":291,"line_end":291,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30319,"byte_end":30328,"line_start":308,"line_end":308,"column_start":12,"column_end":21},"name":"split_off","qualname":"<IndexMap<K, V, S>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self where S: Clone","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":29979,"byte_end":30033,"line_start":301,"line_end":301,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30038,"byte_end":30041,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated map containing the elements in the range","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30046,"byte_end":30116,"line_start":303,"line_end":303,"column_start":5,"column_end":75}},{"value":"/ `[at, len)`. After the call, the original map will be left containing","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30121,"byte_end":30194,"line_start":304,"line_end":304,"column_start":5,"column_end":78}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30199,"byte_end":30263,"line_start":305,"line_end":305,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30268,"byte_end":30271,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `at > len`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30276,"byte_end":30307,"line_start":307,"line_end":307,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30719,"byte_end":30726,"line_start":327,"line_end":327,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexMap<K, V, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more key-value pairs.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more key-value pairs.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30605,"byte_end":30664,"line_start":324,"line_end":324,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30669,"byte_end":30672,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30677,"byte_end":30707,"line_start":326,"line_end":326,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30919,"byte_end":30932,"line_start":334,"line_end":334,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexMap<K, V, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the map as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the map as much as possible.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30809,"byte_end":30864,"line_start":331,"line_end":331,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30869,"byte_end":30872,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30877,"byte_end":30907,"line_start":333,"line_end":333,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31098,"byte_end":31107,"line_start":341,"line_end":341,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<IndexMap<K, V, S>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the map with a lower limit.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the map with a lower limit.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30989,"byte_end":31043,"line_start":338,"line_end":338,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31048,"byte_end":31051,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31056,"byte_end":31086,"line_start":340,"line_end":340,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32035,"byte_end":32041,"line_start":364,"line_end":364,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31383,"byte_end":31422,"line_start":351,"line_end":351,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31427,"byte_end":31430,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31435,"byte_end":31506,"line_start":353,"line_end":353,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31511,"byte_end":31584,"line_start":354,"line_end":354,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `Some(_)`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31589,"byte_end":31655,"line_start":355,"line_end":355,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31660,"byte_end":31663,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31668,"byte_end":31738,"line_start":357,"line_end":357,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `None` is returned.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31743,"byte_end":31795,"line_start":358,"line_end":358,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31800,"byte_end":31803,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31808,"byte_end":31858,"line_start":360,"line_end":360,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31863,"byte_end":31866,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31871,"byte_end":31946,"line_start":362,"line_end":362,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":31951,"byte_end":32023,"line_start":363,"line_end":363,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32827,"byte_end":32838,"line_start":381,"line_end":381,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexMap<K, V, S>>::insert_full","value":"pub fn insert_full(&mut Self, K, V) -> (usize, Option<V>)","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map, and get their index.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map, and get their index.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32136,"byte_end":32196,"line_start":368,"line_end":368,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32201,"byte_end":32204,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32209,"byte_end":32280,"line_start":370,"line_end":370,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32285,"byte_end":32358,"line_start":371,"line_end":371,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `(index, Some(_))`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32363,"byte_end":32438,"line_start":372,"line_end":372,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32443,"byte_end":32446,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32451,"byte_end":32521,"line_start":374,"line_end":374,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `(index, None)` is returned.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32526,"byte_end":32587,"line_start":375,"line_end":375,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32592,"byte_end":32595,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32600,"byte_end":32650,"line_start":377,"line_end":377,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32655,"byte_end":32658,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32663,"byte_end":32738,"line_start":379,"line_end":379,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32743,"byte_end":32815,"line_start":380,"line_end":380,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33170,"byte_end":33175,"line_start":390,"line_end":390,"column_start":12,"column_end":17},"name":"entry","qualname":"<IndexMap<K, V, S>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get the given key’s corresponding entry in the map for insertion and/or\n in-place manipulation.","sig":null,"attributes":[{"value":"/ Get the given key’s corresponding entry in the map for insertion and/or","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":32987,"byte_end":33064,"line_start":386,"line_end":386,"column_start":5,"column_end":80}},{"value":"/ in-place manipulation.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33069,"byte_end":33095,"line_start":387,"line_end":387,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33100,"byte_end":33103,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33108,"byte_end":33158,"line_start":389,"line_end":389,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33425,"byte_end":33437,"line_start":398,"line_end":398,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, S>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `key` exists in the map.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `key` exists in the map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33298,"byte_end":33360,"line_start":395,"line_end":395,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33365,"byte_end":33368,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33373,"byte_end":33413,"line_start":397,"line_end":397,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33731,"byte_end":33734,"line_start":409,"line_end":409,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored for `key`, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored for `key`, if it is present,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33574,"byte_end":33645,"line_start":405,"line_end":405,"column_start":5,"column_end":76}},{"value":"/ else `None`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33650,"byte_end":33666,"line_start":406,"line_end":406,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33671,"byte_end":33674,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":33679,"byte_end":33719,"line_start":408,"line_end":408,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":34173,"byte_end":34186,"line_start":425,"line_end":425,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<IndexMap<K, V, S>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return references to the key-value pair stored for `key`,\n if it is present, else `None`.","sig":null,"attributes":[{"value":"/ Return references to the key-value pair stored for `key`,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":34008,"byte_end":34069,"line_start":421,"line_end":421,"column_start":5,"column_end":66}},{"value":"/ if it is present, else `None`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":34074,"byte_end":34108,"line_start":422,"line_end":422,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":34113,"byte_end":34116,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":34121,"byte_end":34161,"line_start":424,"line_end":424,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":34528,"byte_end":34536,"line_start":438,"line_end":438,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexMap<K, V, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &K, &V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, key and value\n","sig":null,"attributes":[{"value":"/ Return item index, key and value","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":34480,"byte_end":34516,"line_start":437,"line_end":437,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":34951,"byte_end":34963,"line_start":453,"line_end":453,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexMap<K, V, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the map","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the map","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":34840,"byte_end":34886,"line_start":450,"line_end":450,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":34891,"byte_end":34894,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":34899,"byte_end":34939,"line_start":452,"line_end":452,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":35233,"byte_end":35240,"line_start":465,"line_end":465,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":35541,"byte_end":35553,"line_start":477,"line_end":477,"column_start":12,"column_end":24},"name":"get_full_mut","qualname":"<IndexMap<K, V, S>>::get_full_mut","value":"pub fn get_full_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, &K, &mut V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36585,"byte_end":36591,"line_start":512,"line_end":512,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36264,"byte_end":36324,"line_start":504,"line_end":504,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36329,"byte_end":36343,"line_start":505,"line_end":505,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36348,"byte_end":36351,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(key)`, if you need to","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36356,"byte_end":36427,"line_start":507,"line_end":507,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove(key)`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36432,"byte_end":36503,"line_start":508,"line_end":508,"column_start":5,"column_end":76}},{"value":"/ instead.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36508,"byte_end":36520,"line_start":509,"line_end":509,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36525,"byte_end":36528,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36533,"byte_end":36573,"line_start":511,"line_end":511,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37041,"byte_end":37053,"line_start":526,"line_end":526,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<IndexMap<K, V, S>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36726,"byte_end":36787,"line_start":519,"line_end":519,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36792,"byte_end":36795,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry(key)`, if you need to","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36800,"byte_end":36877,"line_start":521,"line_end":521,"column_start":5,"column_end":82}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove_entry(key)`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36882,"byte_end":36959,"line_start":522,"line_end":522,"column_start":5,"column_end":82}},{"value":"/ instead.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36964,"byte_end":36976,"line_start":523,"line_end":523,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36981,"byte_end":36984,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":36989,"byte_end":37029,"line_start":525,"line_end":525,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37610,"byte_end":37621,"line_start":543,"line_end":543,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37199,"byte_end":37259,"line_start":533,"line_end":533,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37264,"byte_end":37278,"line_start":534,"line_end":534,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37283,"byte_end":37286,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37291,"byte_end":37363,"line_start":536,"line_end":536,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37368,"byte_end":37431,"line_start":537,"line_end":537,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37436,"byte_end":37491,"line_start":538,"line_end":538,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37496,"byte_end":37499,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37504,"byte_end":37545,"line_start":540,"line_end":540,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37550,"byte_end":37553,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37558,"byte_end":37598,"line_start":542,"line_end":542,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38165,"byte_end":38182,"line_start":559,"line_end":559,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<IndexMap<K, V, S>>::swap_remove_entry","value":"pub fn swap_remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37772,"byte_end":37833,"line_start":550,"line_end":550,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37838,"byte_end":37841,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37846,"byte_end":37918,"line_start":552,"line_end":552,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37923,"byte_end":37986,"line_start":553,"line_end":553,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":37991,"byte_end":38046,"line_start":554,"line_end":554,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38051,"byte_end":38054,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38059,"byte_end":38100,"line_start":556,"line_end":556,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38105,"byte_end":38108,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38113,"byte_end":38153,"line_start":558,"line_end":558,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38853,"byte_end":38869,"line_start":579,"line_end":579,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexMap<K, V, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38428,"byte_end":38495,"line_start":569,"line_end":569,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38500,"byte_end":38521,"line_start":570,"line_end":570,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38526,"byte_end":38529,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38534,"byte_end":38606,"line_start":572,"line_end":572,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38611,"byte_end":38674,"line_start":573,"line_end":573,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38679,"byte_end":38734,"line_start":574,"line_end":574,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38739,"byte_end":38742,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38747,"byte_end":38788,"line_start":576,"line_end":576,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38793,"byte_end":38796,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":38801,"byte_end":38841,"line_start":578,"line_end":578,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39536,"byte_end":39548,"line_start":600,"line_end":600,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexMap<K, V, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39131,"byte_end":39191,"line_start":590,"line_end":590,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39196,"byte_end":39210,"line_start":591,"line_end":591,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39215,"byte_end":39218,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39223,"byte_end":39289,"line_start":593,"line_end":593,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39294,"byte_end":39355,"line_start":594,"line_end":594,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39360,"byte_end":39417,"line_start":595,"line_end":595,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39422,"byte_end":39425,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39430,"byte_end":39471,"line_start":597,"line_end":597,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39476,"byte_end":39479,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39484,"byte_end":39524,"line_start":599,"line_end":599,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40087,"byte_end":40105,"line_start":616,"line_end":616,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<IndexMap<K, V, S>>::shift_remove_entry","value":"pub fn shift_remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39700,"byte_end":39761,"line_start":607,"line_end":607,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39766,"byte_end":39769,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39774,"byte_end":39840,"line_start":609,"line_end":609,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39845,"byte_end":39906,"line_start":610,"line_end":610,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39911,"byte_end":39968,"line_start":611,"line_end":611,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39973,"byte_end":39976,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":39981,"byte_end":40022,"line_start":613,"line_end":613,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40027,"byte_end":40030,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40035,"byte_end":40075,"line_start":615,"line_end":615,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40771,"byte_end":40788,"line_start":636,"line_end":636,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexMap<K, V, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40352,"byte_end":40419,"line_start":626,"line_end":626,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40424,"byte_end":40445,"line_start":627,"line_end":627,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40450,"byte_end":40453,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40458,"byte_end":40524,"line_start":629,"line_end":629,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40529,"byte_end":40590,"line_start":630,"line_end":630,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40595,"byte_end":40652,"line_start":631,"line_end":631,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40657,"byte_end":40660,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40665,"byte_end":40706,"line_start":633,"line_end":633,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40711,"byte_end":40714,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":40719,"byte_end":40759,"line_start":635,"line_end":635,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41218,"byte_end":41221,"line_start":652,"line_end":652,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexMap<K, V, S>>::pop","value":"pub fn pop(&mut Self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last key-value pair","sig":null,"attributes":[{"value":"/ Remove the last key-value pair","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41051,"byte_end":41085,"line_start":647,"line_end":647,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41090,"byte_end":41093,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ This preserves the order of the remaining elements.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41098,"byte_end":41153,"line_start":649,"line_end":649,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41158,"byte_end":41161,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41166,"byte_end":41206,"line_start":651,"line_end":651,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41564,"byte_end":41570,"line_start":663,"line_end":663,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexMap<K, V, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41288,"byte_end":41360,"line_start":656,"line_end":656,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41365,"byte_end":41399,"line_start":657,"line_end":657,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41404,"byte_end":41407,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41412,"byte_end":41484,"line_start":659,"line_end":659,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41489,"byte_end":41499,"line_start":660,"line_end":660,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41504,"byte_end":41507,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41512,"byte_end":41552,"line_start":662,"line_end":662,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42025,"byte_end":42034,"line_start":680,"line_end":680,"column_start":12,"column_end":21},"name":"sort_keys","qualname":"<IndexMap<K, V, S>>::sort_keys","value":"pub fn sort_keys(&mut Self) where K: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs by the default ordering of the keys.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs by the default ordering of the keys.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41880,"byte_end":41953,"line_start":677,"line_end":677,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41958,"byte_end":41961,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ See [`sort_by`](Self::sort_by) for details.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":41966,"byte_end":42013,"line_start":679,"line_end":679,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42624,"byte_end":42631,"line_start":697,"line_end":697,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexMap<K, V, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&K, &V, &K, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs in place using the comparison\n function `cmp`.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs in place using the comparison","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42209,"byte_end":42275,"line_start":689,"line_end":689,"column_start":5,"column_end":69}},{"value":"/ function `cmp`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42280,"byte_end":42299,"line_start":690,"line_end":690,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42304,"byte_end":42307,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ The comparison function receives two key and value pairs to compare (you","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42312,"byte_end":42388,"line_start":692,"line_end":692,"column_start":5,"column_end":81}},{"value":"/ can sort by keys or values or their combination as needed).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42393,"byte_end":42456,"line_start":693,"line_end":693,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42461,"byte_end":42464,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n + c)** time and **O(n)** space where *n* is","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42469,"byte_end":42540,"line_start":695,"line_end":695,"column_start":5,"column_end":76}},{"value":"/ the length of the map and *c* the capacity. The sort is stable.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42545,"byte_end":42612,"line_start":696,"line_end":696,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":43034,"byte_end":43043,"line_start":710,"line_end":710,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexMap<K, V, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<K, V> where F: FnMut(&K, &V, &K, &V)\n-> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by-value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[{"value":"/ Sort the key-value pairs of the map and return a by-value iterator of","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42868,"byte_end":42941,"line_start":706,"line_end":706,"column_start":5,"column_end":78}},{"value":"/ the key-value pairs with the result.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42946,"byte_end":42986,"line_start":707,"line_end":707,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42991,"byte_end":42994,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":42999,"byte_end":43022,"line_start":709,"line_end":709,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":43568,"byte_end":43586,"line_start":725,"line_end":725,"column_start":12,"column_end":30},"name":"sort_unstable_keys","qualname":"<IndexMap<K, V, S>>::sort_unstable_keys","value":"pub fn sort_unstable_keys(&mut Self) where K: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the map's key-value pairs by the default ordering of the keys, but\n may not preserve the order of equal elements.","sig":null,"attributes":[{"value":"/ Sort the map's key-value pairs by the default ordering of the keys, but","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":43349,"byte_end":43424,"line_start":721,"line_end":721,"column_start":5,"column_end":80}},{"value":"/ may not preserve the order of equal elements.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":43429,"byte_end":43478,"line_start":722,"line_end":722,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":43483,"byte_end":43486,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ See [`sort_unstable_by`](Self::sort_unstable_by) for details.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":43491,"byte_end":43556,"line_start":724,"line_end":724,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":44219,"byte_end":44235,"line_start":742,"line_end":742,"column_start":12,"column_end":28},"name":"sort_unstable_by","qualname":"<IndexMap<K, V, S>>::sort_unstable_by","value":"pub fn sort_unstable_by<F>(&mut Self, F) where F: FnMut(&K, &V, &K, &V) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Sort the map's key-value pairs in place using the comparison function `cmp`, but\n may not preserve the order of equal elements.","sig":null,"attributes":[{"value":"/ Sort the map's key-value pairs in place using the comparison function `cmp`, but","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":43770,"byte_end":43854,"line_start":734,"line_end":734,"column_start":5,"column_end":89}},{"value":"/ may not preserve the order of equal elements.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":43859,"byte_end":43908,"line_start":735,"line_end":735,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":43913,"byte_end":43916,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ The comparison function receives two key and value pairs to compare (you","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":43921,"byte_end":43997,"line_start":737,"line_end":737,"column_start":5,"column_end":81}},{"value":"/ can sort by keys or values or their combination as needed).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":44002,"byte_end":44065,"line_start":738,"line_end":738,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":44070,"byte_end":44073,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n + c)** time where *n* is","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":44078,"byte_end":44130,"line_start":740,"line_end":740,"column_start":5,"column_end":57}},{"value":"/ the length of the map and *c* is the capacity. The sort is unstable.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":44135,"byte_end":44207,"line_start":741,"line_end":741,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":44663,"byte_end":44681,"line_start":756,"line_end":756,"column_start":12,"column_end":30},"name":"sorted_unstable_by","qualname":"<IndexMap<K, V, S>>::sorted_unstable_by","value":"pub fn sorted_unstable_by<F>(Self, F) -> IntoIter<K, V> where\nF: FnMut(&K, &V, &K, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by-value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[{"value":"/ Sort the key-value pairs of the map and return a by-value iterator of","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":44481,"byte_end":44554,"line_start":751,"line_end":751,"column_start":5,"column_end":78}},{"value":"/ the key-value pairs with the result.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":44559,"byte_end":44599,"line_start":752,"line_end":752,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":44604,"byte_end":44607,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ The sort is unstable.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":44612,"byte_end":44637,"line_start":754,"line_end":754,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":44642,"byte_end":44651,"line_start":755,"line_end":755,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45133,"byte_end":45140,"line_start":770,"line_end":770,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexMap<K, V, S>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the map’s key-value pairs in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the map’s key-value pairs in place.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":44996,"byte_end":45059,"line_start":767,"line_end":767,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45064,"byte_end":45067,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45072,"byte_end":45121,"line_start":769,"line_end":769,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45377,"byte_end":45386,"line_start":781,"line_end":781,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexMap<K, V, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45229,"byte_end":45262,"line_start":776,"line_end":776,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45267,"byte_end":45270,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45275,"byte_end":45322,"line_start":778,"line_end":778,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45327,"byte_end":45330,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45335,"byte_end":45365,"line_start":780,"line_end":780,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45644,"byte_end":45657,"line_start":790,"line_end":790,"column_start":12,"column_end":25},"name":"get_index_mut","qualname":"<IndexMap<K, V, S>>::get_index_mut","value":"pub fn get_index_mut(&mut Self, usize) -> Option<(&mut K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45496,"byte_end":45529,"line_start":785,"line_end":785,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45534,"byte_end":45537,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45542,"byte_end":45589,"line_start":787,"line_end":787,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45594,"byte_end":45597,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45602,"byte_end":45632,"line_start":789,"line_end":789,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45874,"byte_end":45879,"line_start":797,"line_end":797,"column_start":12,"column_end":17},"name":"first","qualname":"<IndexMap<K, V, S>>::first","value":"pub fn first(&Self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the first key-value pair","sig":null,"attributes":[{"value":"/ Get the first key-value pair","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45787,"byte_end":45819,"line_start":794,"line_end":794,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45824,"byte_end":45827,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45832,"byte_end":45862,"line_start":796,"line_end":796,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46093,"byte_end":46102,"line_start":804,"line_end":804,"column_start":12,"column_end":21},"name":"first_mut","qualname":"<IndexMap<K, V, S>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the first key-value pair, with mutable access to the value","sig":null,"attributes":[{"value":"/ Get the first key-value pair, with mutable access to the value","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45972,"byte_end":46038,"line_start":801,"line_end":801,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46043,"byte_end":46046,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46051,"byte_end":46081,"line_start":803,"line_end":803,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46300,"byte_end":46304,"line_start":811,"line_end":811,"column_start":12,"column_end":16},"name":"last","qualname":"<IndexMap<K, V, S>>::last","value":"pub fn last(&Self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the last key-value pair","sig":null,"attributes":[{"value":"/ Get the last key-value pair","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46214,"byte_end":46245,"line_start":808,"line_end":808,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46250,"byte_end":46253,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46258,"byte_end":46288,"line_start":810,"line_end":810,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46516,"byte_end":46524,"line_start":818,"line_end":818,"column_start":12,"column_end":20},"name":"last_mut","qualname":"<IndexMap<K, V, S>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the last key-value pair, with mutable access to the value","sig":null,"attributes":[{"value":"/ Get the last key-value pair, with mutable access to the value","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46396,"byte_end":46461,"line_start":815,"line_end":815,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46466,"byte_end":46469,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46474,"byte_end":46504,"line_start":817,"line_end":817,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47011,"byte_end":47028,"line_start":831,"line_end":831,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexMap<K, V, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46635,"byte_end":46673,"line_start":822,"line_end":822,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46678,"byte_end":46681,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46686,"byte_end":46733,"line_start":824,"line_end":824,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46738,"byte_end":46741,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46746,"byte_end":46818,"line_start":826,"line_end":826,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46823,"byte_end":46886,"line_start":827,"line_end":827,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46891,"byte_end":46946,"line_start":828,"line_end":828,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46951,"byte_end":46954,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":46959,"byte_end":46999,"line_start":830,"line_end":830,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47498,"byte_end":47516,"line_start":844,"line_end":844,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexMap<K, V, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47128,"byte_end":47166,"line_start":835,"line_end":835,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47171,"byte_end":47174,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47179,"byte_end":47226,"line_start":837,"line_end":837,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47231,"byte_end":47234,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47239,"byte_end":47305,"line_start":839,"line_end":839,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47310,"byte_end":47371,"line_start":840,"line_end":840,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47376,"byte_end":47433,"line_start":841,"line_end":841,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47438,"byte_end":47441,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47446,"byte_end":47486,"line_start":843,"line_end":843,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48056,"byte_end":48066,"line_start":857,"line_end":857,"column_start":12,"column_end":22},"name":"move_index","qualname":"<IndexMap<K, V, S>>::move_index","value":"pub fn move_index(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Moves the position of a key-value pair from one index to another\n by shifting all other pairs in-between.","sig":null,"attributes":[{"value":"/ Moves the position of a key-value pair from one index to another","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47617,"byte_end":47685,"line_start":848,"line_end":848,"column_start":5,"column_end":73}},{"value":"/ by shifting all other pairs in-between.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47690,"byte_end":47733,"line_start":849,"line_end":849,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47738,"byte_end":47741,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ * If `from < to`, the other pairs will shift down while the targeted pair moves up.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47746,"byte_end":47833,"line_start":851,"line_end":851,"column_start":5,"column_end":92}},{"value":"/ * If `from > to`, the other pairs will shift up while the targeted pair moves down.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47838,"byte_end":47925,"line_start":852,"line_end":852,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47930,"byte_end":47933,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `from` or `to` are out of bounds.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47938,"byte_end":47991,"line_start":854,"line_end":854,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":47996,"byte_end":47999,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48004,"byte_end":48044,"line_start":856,"line_end":856,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48285,"byte_end":48297,"line_start":864,"line_end":864,"column_start":12,"column_end":24},"name":"swap_indices","qualname":"<IndexMap<K, V, S>>::swap_indices","value":"pub fn swap_indices(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the position of two key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Swaps the position of two key-value pairs in the map.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48154,"byte_end":48211,"line_start":861,"line_end":861,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48216,"byte_end":48219,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `a` or `b` are out of bounds.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48224,"byte_end":48273,"line_start":863,"line_end":863,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48634,"byte_end":48638,"line_start":876,"line_end":876,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":746}],"decl_id":null,"docs":" An iterator over the keys of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `IndexMap`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48377,"byte_end":48423,"line_start":869,"line_end":869,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48424,"byte_end":48427,"line_start":870,"line_end":870,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`IndexMap`]. See its","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48428,"byte_end":48504,"line_start":871,"line_end":871,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48505,"byte_end":48532,"line_start":872,"line_end":872,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48533,"byte_end":48536,"line_start":873,"line_end":873,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.IndexMap.html#method.keys","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48537,"byte_end":48583,"line_start":874,"line_end":874,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48584,"byte_end":48622,"line_start":875,"line_end":875,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49727,"byte_end":49735,"line_start":920,"line_end":920,"column_start":12,"column_end":20},"name":"IntoKeys","qualname":"::map::IntoKeys","value":"IntoKeys {  }","parent":null,"children":[{"krate":0,"index":773}],"decl_id":null,"docs":" An owning iterator over the keys of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the keys of a `IndexMap`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49448,"byte_end":49501,"line_start":913,"line_end":913,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49502,"byte_end":49505,"line_start":914,"line_end":914,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_keys`] method on [`IndexMap`].","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49506,"byte_end":49579,"line_start":915,"line_end":915,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49580,"byte_end":49615,"line_start":916,"line_end":916,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49616,"byte_end":49619,"line_start":917,"line_end":917,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49620,"byte_end":49658,"line_start":918,"line_end":918,"column_start":1,"column_end":39}},{"value":"/ [`into_keys`]: struct.IndexMap.html#method.into_keys","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49659,"byte_end":49715,"line_start":919,"line_end":919,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50657,"byte_end":50663,"line_start":956,"line_end":956,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":796}],"decl_id":null,"docs":" An iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `IndexMap`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50392,"byte_end":50440,"line_start":949,"line_end":949,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50441,"byte_end":50444,"line_start":950,"line_end":950,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`IndexMap`]. See its","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50445,"byte_end":50523,"line_start":951,"line_end":951,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50524,"byte_end":50551,"line_start":952,"line_end":952,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50552,"byte_end":50555,"line_start":953,"line_end":953,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.IndexMap.html#method.values","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50556,"byte_end":50606,"line_start":954,"line_end":954,"column_start":1,"column_end":51}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50607,"byte_end":50645,"line_start":955,"line_end":955,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":820},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51775,"byte_end":51784,"line_start":1000,"line_end":1000,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":824}],"decl_id":null,"docs":" A mutable iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `IndexMap`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51491,"byte_end":51546,"line_start":993,"line_end":993,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51547,"byte_end":51550,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`IndexMap`]. See its","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51551,"byte_end":51633,"line_start":995,"line_end":995,"column_start":1,"column_end":83}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51634,"byte_end":51661,"line_start":996,"line_end":996,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51662,"byte_end":51665,"line_start":997,"line_end":997,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.IndexMap.html#method.values_mut","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51666,"byte_end":51724,"line_start":998,"line_end":998,"column_start":1,"column_end":59}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51725,"byte_end":51763,"line_start":999,"line_end":999,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":844},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52786,"byte_end":52796,"line_start":1036,"line_end":1036,"column_start":12,"column_end":22},"name":"IntoValues","qualname":"::map::IntoValues","value":"IntoValues {  }","parent":null,"children":[{"krate":0,"index":847}],"decl_id":null,"docs":" An owning iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the values of a `IndexMap`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52499,"byte_end":52554,"line_start":1029,"line_end":1029,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52555,"byte_end":52558,"line_start":1030,"line_end":1030,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_values`] method on [`IndexMap`].","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52559,"byte_end":52634,"line_start":1031,"line_end":1031,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52635,"byte_end":52670,"line_start":1032,"line_end":1032,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52671,"byte_end":52674,"line_start":1033,"line_end":1033,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52675,"byte_end":52713,"line_start":1034,"line_end":1034,"column_start":1,"column_end":39}},{"value":"/ [`into_values`]: struct.IndexMap.html#method.into_values","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52714,"byte_end":52774,"line_start":1035,"line_end":1035,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53729,"byte_end":53733,"line_start":1072,"line_end":1072,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":870}],"decl_id":null,"docs":" An iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `IndexMap`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53469,"byte_end":53518,"line_start":1065,"line_end":1065,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53519,"byte_end":53522,"line_start":1066,"line_end":1066,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexMap`]. See its","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53523,"byte_end":53599,"line_start":1067,"line_end":1067,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53600,"byte_end":53627,"line_start":1068,"line_end":1068,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53628,"byte_end":53631,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.IndexMap.html#method.iter","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53632,"byte_end":53678,"line_start":1070,"line_end":1070,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53679,"byte_end":53717,"line_start":1071,"line_end":1071,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54837,"byte_end":54844,"line_start":1116,"line_end":1116,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":898}],"decl_id":null,"docs":" A mutable iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `IndexMap`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54558,"byte_end":54614,"line_start":1109,"line_end":1109,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54615,"byte_end":54618,"line_start":1110,"line_end":1110,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`IndexMap`]. See its","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54619,"byte_end":54699,"line_start":1111,"line_end":1111,"column_start":1,"column_end":81}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54700,"byte_end":54727,"line_start":1112,"line_end":1112,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54728,"byte_end":54731,"line_start":1113,"line_end":1113,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.IndexMap.html#method.iter_mut","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54732,"byte_end":54786,"line_start":1114,"line_end":1114,"column_start":1,"column_end":55}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54787,"byte_end":54825,"line_start":1115,"line_end":1115,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":918},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55882,"byte_end":55890,"line_start":1152,"line_end":1152,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":921}],"decl_id":null,"docs":" An owning iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `IndexMap`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55561,"byte_end":55617,"line_start":1145,"line_end":1145,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55618,"byte_end":55621,"line_start":1146,"line_end":1146,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexMap`]","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55622,"byte_end":55694,"line_start":1147,"line_end":1147,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55695,"byte_end":55770,"line_start":1148,"line_end":1148,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55771,"byte_end":55774,"line_start":1149,"line_end":1149,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.IndexMap.html#method.into_iter","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55775,"byte_end":55831,"line_start":1150,"line_end":1150,"column_start":1,"column_end":57}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55832,"byte_end":55870,"line_start":1151,"line_end":1151,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":940},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56844,"byte_end":56849,"line_start":1188,"line_end":1188,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":944}],"decl_id":null,"docs":" A draining iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `IndexMap`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56573,"byte_end":56630,"line_start":1181,"line_end":1181,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56631,"byte_end":56634,"line_start":1182,"line_end":1182,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexMap`]. See its","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56635,"byte_end":56712,"line_start":1183,"line_end":1183,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56713,"byte_end":56740,"line_start":1184,"line_end":1184,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56741,"byte_end":56744,"line_start":1185,"line_end":1185,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.IndexMap.html#method.drain","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56745,"byte_end":56793,"line_start":1186,"line_end":1186,"column_start":1,"column_end":49}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56794,"byte_end":56832,"line_start":1187,"line_end":1187,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":1056},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::set","value":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1067},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1084},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":1094},{"krate":0,"index":1097},{"krate":0,"index":1100},{"krate":0,"index":1103},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1113},{"krate":0,"index":1116},{"krate":0,"index":1119},{"krate":0,"index":1121},{"krate":0,"index":1125},{"krate":0,"index":1130},{"krate":0,"index":1139},{"krate":0,"index":1143},{"krate":0,"index":1147},{"krate":0,"index":1162},{"krate":0,"index":1236},{"krate":0,"index":1248},{"krate":0,"index":1253},{"krate":0,"index":1256},{"krate":0,"index":1259},{"krate":0,"index":1261},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1269},{"krate":0,"index":1273},{"krate":0,"index":1277},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1287},{"krate":0,"index":1290},{"krate":0,"index":1294},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1302},{"krate":0,"index":1304},{"krate":0,"index":1307},{"krate":0,"index":1314},{"krate":0,"index":1320},{"krate":0,"index":1326},{"krate":0,"index":1332},{"krate":0,"index":1338},{"krate":0,"index":1344},{"krate":0,"index":1348},{"krate":0,"index":1353},{"krate":0,"index":1356},{"krate":0,"index":1368},{"krate":0,"index":1374},{"krate":0,"index":1381},{"krate":0,"index":1385},{"krate":0,"index":1388},{"krate":0,"index":1392},{"krate":0,"index":1396},{"krate":0,"index":1402},{"krate":0,"index":1409},{"krate":0,"index":1413},{"krate":0,"index":1416},{"krate":0,"index":1420},{"krate":0,"index":1424},{"krate":0,"index":1430},{"krate":0,"index":1441},{"krate":0,"index":1449},{"krate":0,"index":1453},{"krate":0,"index":1458},{"krate":0,"index":1463},{"krate":0,"index":1468},{"krate":0,"index":1478},{"krate":0,"index":1485},{"krate":0,"index":1488},{"krate":0,"index":1492},{"krate":0,"index":1496},{"krate":0,"index":1502},{"krate":0,"index":1508},{"krate":0,"index":1514}],"decl_id":null,"docs":" A hash set implemented using `IndexMap`\n","sig":null,"attributes":[{"value":"/ A hash set implemented using `IndexMap`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":109252,"byte_end":109295,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1121},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111342,"byte_end":111350,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::set::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":1124}],"decl_id":null,"docs":" A hash set where the iteration order of the values is independent of their\n hash values.","sig":null,"attributes":[{"value":"/ A hash set where the iteration order of the values is independent of their","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":109736,"byte_end":109814,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ hash values.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":109815,"byte_end":109831,"line_start":22,"line_end":22,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":109832,"byte_end":109835,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashSet`, but also","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":109836,"byte_end":109913,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":109914,"byte_end":109942,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":109943,"byte_end":109946,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":109947,"byte_end":109958,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":109959,"byte_end":109962,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The values have a consistent order that is determined by the sequence of","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":109963,"byte_end":110039,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ insertion and removal calls on the set. The order does not depend on the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110040,"byte_end":110116,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ values or the hash function at all. Note that insertion order and value","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110117,"byte_end":110192,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ are not affected if a re-insertion is attempted once an element is","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110193,"byte_end":110263,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/ already present.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110264,"byte_end":110284,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110285,"byte_end":110288,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the set *in order*.  Set operation iterators like","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110289,"byte_end":110365,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ `union` produce a concatenated order, as do their matching \"bitwise\"","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110366,"byte_end":110438,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ operators.  See their documentation for specifics.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110439,"byte_end":110493,"line_start":37,"line_end":37,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110494,"byte_end":110497,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110498,"byte_end":110572,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110573,"byte_end":110649,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110650,"byte_end":110715,"line_start":41,"line_end":41,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110716,"byte_end":110719,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110720,"byte_end":110733,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110734,"byte_end":110737,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ The values are indexed in a compact range without holes in the range","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110738,"byte_end":110810,"line_start":45,"line_end":45,"column_start":1,"column_end":73}},{"value":"/ `0..self.len()`. For example, the method `.get_full` looks up the index for","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110811,"byte_end":110890,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ a value, and the method `.get_index` looks up the value by index.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110891,"byte_end":110960,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110961,"byte_end":110964,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110965,"byte_end":110979,"line_start":49,"line_end":49,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110980,"byte_end":110983,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110984,"byte_end":110991,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexSet;","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":110992,"byte_end":111019,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111020,"byte_end":111023,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Collects which letters appear in a sentence.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111024,"byte_end":111075,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let letters: IndexSet<_> = \"a short treatise on fungi\".chars().collect();","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111076,"byte_end":111153,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111154,"byte_end":111157,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ assert!(letters.contains(&'s'));","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111158,"byte_end":111194,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'t'));","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111195,"byte_end":111231,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'u'));","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111232,"byte_end":111268,"line_start":59,"line_end":59,"column_start":1,"column_end":37}},{"value":"/ assert!(!letters.contains(&'y'));","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111269,"byte_end":111306,"line_start":60,"line_end":60,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111307,"byte_end":111314,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111315,"byte_end":111330,"line_start":62,"line_end":62,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":112794,"byte_end":112797,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new set. (Does not allocate.)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":112740,"byte_end":112782,"line_start":129,"line_end":129,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113035,"byte_end":113048,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexSet<T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":112884,"byte_end":112936,"line_start":136,"line_end":136,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":112941,"byte_end":112980,"line_start":137,"line_end":137,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":112985,"byte_end":112988,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":112993,"byte_end":113023,"line_start":139,"line_end":139,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113335,"byte_end":113359,"line_start":152,"line_end":152,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexSet<T, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113184,"byte_end":113236,"line_start":148,"line_end":148,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113241,"byte_end":113280,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113285,"byte_end":113288,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113293,"byte_end":113323,"line_start":151,"line_end":151,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113658,"byte_end":113669,"line_start":162,"line_end":162,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<IndexSet<T, S>>::with_hasher","value":"pub const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with `hash_builder`.","sig":null,"attributes":[{"value":"/ Create a new set with `hash_builder`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113507,"byte_end":113548,"line_start":158,"line_end":158,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113553,"byte_end":113556,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This function is `const`, so it","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113561,"byte_end":113596,"line_start":160,"line_end":160,"column_start":5,"column_end":40}},{"value":"/ can be called in `static` contexts.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113601,"byte_end":113640,"line_start":161,"line_end":161,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113833,"byte_end":113841,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113791,"byte_end":113821,"line_start":168,"line_end":168,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113961,"byte_end":113967,"line_start":174,"line_end":174,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexSet<T, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the set's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the set's `BuildHasher`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113899,"byte_end":113949,"line_start":173,"line_end":173,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114120,"byte_end":114123,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements in the set.","sig":null,"attributes":[{"value":"/ Return the number of elements in the set.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114020,"byte_end":114065,"line_start":178,"line_end":178,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114070,"byte_end":114073,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114078,"byte_end":114108,"line_start":180,"line_end":180,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114280,"byte_end":114288,"line_start":188,"line_end":188,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the set contains no elements.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114176,"byte_end":114225,"line_start":185,"line_end":185,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114230,"byte_end":114233,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114238,"byte_end":114268,"line_start":187,"line_end":187,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114422,"byte_end":114426,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, S>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the set, in their order","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114345,"byte_end":114410,"line_start":192,"line_end":192,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114656,"byte_end":114661,"line_start":202,"line_end":202,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements in the set, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all elements in the set, while preserving its capacity.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114535,"byte_end":114601,"line_start":199,"line_end":199,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114606,"byte_end":114609,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114614,"byte_end":114644,"line_start":201,"line_end":201,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114888,"byte_end":114896,"line_start":209,"line_end":209,"column_start":12,"column_end":20},"name":"truncate","qualname":"<IndexSet<T, S>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the set, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the set, keeping the first `len` elements and dropping the rest.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114712,"byte_end":114789,"line_start":206,"line_end":206,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114794,"byte_end":114797,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the set's current length, this has no effect.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114802,"byte_end":114876,"line_start":208,"line_end":208,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115638,"byte_end":115643,"line_start":226,"line_end":226,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexSet<T, S>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, T> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexSet` in the given index range, returning those values\n as a drain iterator.","sig":null,"attributes":[{"value":"/ Clears the `IndexSet` in the given index range, returning those values","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":114965,"byte_end":115039,"line_start":213,"line_end":213,"column_start":5,"column_end":79}},{"value":"/ as a drain iterator.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115044,"byte_end":115068,"line_start":214,"line_end":214,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115073,"byte_end":115076,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ The range may be any type that implements `RangeBounds<usize>`,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115081,"byte_end":115148,"line_start":216,"line_end":216,"column_start":5,"column_end":72}},{"value":"/ including all of the `std::ops::Range*` types, or even a tuple pair of","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115153,"byte_end":115227,"line_start":217,"line_end":217,"column_start":5,"column_end":79}},{"value":"/ `Bound` start and end values. To drain the set entirely, use `RangeFull`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115232,"byte_end":115308,"line_start":218,"line_end":218,"column_start":5,"column_end":81}},{"value":"/ like `set.drain(..)`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115313,"byte_end":115338,"line_start":219,"line_end":219,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115343,"byte_end":115346,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ This shifts down all entries following the drained range to fill the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115351,"byte_end":115423,"line_start":221,"line_end":221,"column_start":5,"column_end":77}},{"value":"/ gap, and keeps the allocated memory for reuse.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115428,"byte_end":115478,"line_start":222,"line_end":222,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115483,"byte_end":115486,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the starting point is greater than the end point or if","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115491,"byte_end":115565,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/ the end point is greater than the length of the set.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115570,"byte_end":115626,"line_start":225,"line_end":225,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116154,"byte_end":116163,"line_start":242,"line_end":242,"column_start":12,"column_end":21},"name":"split_off","qualname":"<IndexSet<T, S>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self where S: Clone","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115814,"byte_end":115868,"line_start":235,"line_end":235,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115873,"byte_end":115876,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated set containing the elements in the range","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115881,"byte_end":115951,"line_start":237,"line_end":237,"column_start":5,"column_end":75}},{"value":"/ `[at, len)`. After the call, the original set will be left containing","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":115956,"byte_end":116029,"line_start":238,"line_end":238,"column_start":5,"column_end":78}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116034,"byte_end":116098,"line_start":239,"line_end":239,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116103,"byte_end":116106,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `at > len`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116111,"byte_end":116142,"line_start":241,"line_end":241,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116484,"byte_end":116491,"line_start":260,"line_end":260,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexSet<T, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more values.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more values.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116379,"byte_end":116429,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116434,"byte_end":116437,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116442,"byte_end":116472,"line_start":259,"line_end":259,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116683,"byte_end":116696,"line_start":267,"line_end":267,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexSet<T, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the set as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the set as much as possible.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116573,"byte_end":116628,"line_start":264,"line_end":264,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116633,"byte_end":116636,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116641,"byte_end":116671,"line_start":266,"line_end":266,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116864,"byte_end":116873,"line_start":274,"line_end":274,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<IndexSet<T, S>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the set with a lower limit.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the set with a lower limit.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116755,"byte_end":116809,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116814,"byte_end":116817,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116822,"byte_end":116852,"line_start":273,"line_end":273,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117313,"byte_end":117319,"line_start":286,"line_end":286,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, S>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set.","sig":null,"attributes":[{"value":"/ Insert the value into the set.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116961,"byte_end":116995,"line_start":278,"line_end":278,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117000,"byte_end":117003,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117008,"byte_end":117071,"line_start":280,"line_end":280,"column_start":5,"column_end":68}},{"value":"/ `false` leaving the original value in the set and without","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117076,"byte_end":117137,"line_start":281,"line_end":281,"column_start":5,"column_end":66}},{"value":"/ altering its insertion order. Otherwise, it inserts the new","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117142,"byte_end":117205,"line_start":282,"line_end":282,"column_start":5,"column_end":68}},{"value":"/ item and returns `true`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117210,"byte_end":117238,"line_start":283,"line_end":283,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117243,"byte_end":117246,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117251,"byte_end":117301,"line_start":285,"line_end":285,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117857,"byte_end":117868,"line_start":299,"line_end":299,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexSet<T, S>>::insert_full","value":"pub fn insert_full(&mut Self, T) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set, and get its index.","sig":null,"attributes":[{"value":"/ Insert the value into the set, and get its index.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117407,"byte_end":117460,"line_start":290,"line_end":290,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117465,"byte_end":117468,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117473,"byte_end":117536,"line_start":292,"line_end":292,"column_start":5,"column_end":68}},{"value":"/ the index of the existing item and `false`, leaving the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117541,"byte_end":117600,"line_start":293,"line_end":293,"column_start":5,"column_end":64}},{"value":"/ original value in the set and without altering its insertion","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117605,"byte_end":117669,"line_start":294,"line_end":294,"column_start":5,"column_end":69}},{"value":"/ order. Otherwise, it inserts the new item and returns the index","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117674,"byte_end":117741,"line_start":295,"line_end":295,"column_start":5,"column_end":72}},{"value":"/ of the inserted item and `true`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117746,"byte_end":117782,"line_start":296,"line_end":296,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117787,"byte_end":117790,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":117795,"byte_end":117845,"line_start":298,"line_end":298,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":118358,"byte_end":118368,"line_start":315,"line_end":315,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, S>>::difference","value":"pub fn difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Difference where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` but not `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` but not `other`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":118190,"byte_end":118264,"line_start":312,"line_end":312,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":118269,"byte_end":118272,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":118277,"byte_end":118346,"line_start":314,"line_end":314,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":118817,"byte_end":118837,"line_start":330,"line_end":330,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, S>>::symmetric_difference","value":"pub fn symmetric_difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>)\n-> SymmetricDifference where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` or `other`,\n but not in both.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` or `other`,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":118573,"byte_end":118642,"line_start":325,"line_end":325,"column_start":5,"column_end":74}},{"value":"/ but not in both.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":118647,"byte_end":118667,"line_start":326,"line_end":326,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":118672,"byte_end":118675,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":118680,"byte_end":118752,"line_start":328,"line_end":328,"column_start":5,"column_end":77}},{"value":"/ values from `other` in their original order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":118757,"byte_end":118805,"line_start":329,"line_end":329,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":119277,"byte_end":119289,"line_start":345,"line_end":345,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, S>>::intersection","value":"pub fn intersection<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Intersection\nwhere S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in both `self` and `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in both `self` and `other`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":119108,"byte_end":119183,"line_start":342,"line_end":342,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":119188,"byte_end":119191,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":119196,"byte_end":119265,"line_start":344,"line_end":344,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":119731,"byte_end":119736,"line_start":359,"line_end":359,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, S>>::union","value":"pub fn union<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Union where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all values that are in `self` or `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over all values that are in `self` or `other`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":119498,"byte_end":119567,"line_start":355,"line_end":355,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":119572,"byte_end":119575,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":119580,"byte_end":119652,"line_start":357,"line_end":357,"column_start":5,"column_end":77}},{"value":"/ values that are unique to `other` in their original order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":119657,"byte_end":119719,"line_start":358,"line_end":358,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120070,"byte_end":120078,"line_start":371,"line_end":371,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, S>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `value` exists in the set.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `value` exists in the set.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":119941,"byte_end":120005,"line_start":368,"line_end":368,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120010,"byte_end":120013,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120018,"byte_end":120058,"line_start":370,"line_end":370,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120371,"byte_end":120374,"line_start":382,"line_end":382,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexSet<T, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored in the set, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored in the set, if it is present,","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120213,"byte_end":120285,"line_start":378,"line_end":378,"column_start":5,"column_end":77}},{"value":"/ else `None`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120290,"byte_end":120306,"line_start":379,"line_end":379,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120311,"byte_end":120314,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120319,"byte_end":120359,"line_start":381,"line_end":381,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120577,"byte_end":120585,"line_start":390,"line_end":390,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexSet<T, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &T)> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index and value\n","sig":null,"attributes":[{"value":"/ Return item index and value","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120534,"byte_end":120565,"line_start":389,"line_end":389,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120815,"byte_end":120827,"line_start":398,"line_end":398,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexSet<T, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the set\n","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the set","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120757,"byte_end":120803,"line_start":397,"line_end":397,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":121216,"byte_end":121223,"line_start":410,"line_end":410,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexSet<T, S>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one, without altering its insertion order. Returns\n the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":120971,"byte_end":121045,"line_start":405,"line_end":405,"column_start":5,"column_end":79}},{"value":"/ equal to the given one, without altering its insertion order. Returns","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":121050,"byte_end":121123,"line_start":406,"line_end":406,"column_start":5,"column_end":78}},{"value":"/ the replaced value.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":121128,"byte_end":121151,"line_start":407,"line_end":407,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":121156,"byte_end":121159,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":121164,"byte_end":121204,"line_start":409,"line_end":409,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":121577,"byte_end":121589,"line_start":419,"line_end":419,"column_start":12,"column_end":24},"name":"replace_full","qualname":"<IndexSet<T, S>>::replace_full","value":"pub fn replace_full(&mut Self, T) -> (usize, Option<T>)","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one, without altering its insertion order. Returns\n the index of the item and its replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":121306,"byte_end":121380,"line_start":414,"line_end":414,"column_start":5,"column_end":79}},{"value":"/ equal to the given one, without altering its insertion order. Returns","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":121385,"byte_end":121458,"line_start":415,"line_end":415,"column_start":5,"column_end":78}},{"value":"/ the index of the item and its replaced value.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":121463,"byte_end":121512,"line_start":416,"line_end":416,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":121517,"byte_end":121520,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":121525,"byte_end":121565,"line_start":418,"line_end":418,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122235,"byte_end":122241,"line_start":438,"line_end":438,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":121932,"byte_end":122003,"line_start":432,"line_end":432,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122008,"byte_end":122011,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(value)`, if you want","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122016,"byte_end":122086,"line_start":434,"line_end":434,"column_start":5,"column_end":75}},{"value":"/ to preserve the order of the values in the set, use `.shift_remove(value)`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122091,"byte_end":122170,"line_start":435,"line_end":435,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122175,"byte_end":122178,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122183,"byte_end":122223,"line_start":437,"line_end":437,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122787,"byte_end":122798,"line_start":454,"line_end":454,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexSet<T, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122375,"byte_end":122446,"line_start":445,"line_end":445,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122451,"byte_end":122454,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122459,"byte_end":122532,"line_start":447,"line_end":447,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122537,"byte_end":122600,"line_start":448,"line_end":448,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122605,"byte_end":122660,"line_start":449,"line_end":449,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122665,"byte_end":122668,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122673,"byte_end":122722,"line_start":451,"line_end":451,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122727,"byte_end":122730,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122735,"byte_end":122775,"line_start":453,"line_end":453,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123352,"byte_end":123364,"line_start":470,"line_end":470,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexSet<T, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":122946,"byte_end":123017,"line_start":461,"line_end":461,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123022,"byte_end":123025,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123030,"byte_end":123097,"line_start":463,"line_end":463,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123102,"byte_end":123163,"line_start":464,"line_end":464,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123168,"byte_end":123225,"line_start":465,"line_end":465,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123230,"byte_end":123233,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123238,"byte_end":123287,"line_start":467,"line_end":467,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123292,"byte_end":123295,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123300,"byte_end":123340,"line_start":469,"line_end":469,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123850,"byte_end":123854,"line_start":485,"line_end":485,"column_start":12,"column_end":16},"name":"take","qualname":"<IndexSet<T, S>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123513,"byte_end":123587,"line_start":477,"line_end":477,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123592,"byte_end":123606,"line_start":478,"line_end":478,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123611,"byte_end":123614,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_take(value)`, if you need to","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123619,"byte_end":123690,"line_start":480,"line_end":480,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the values in the set, use `.shift_take(value)`","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123695,"byte_end":123768,"line_start":481,"line_end":481,"column_start":5,"column_end":78}},{"value":"/ instead.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123773,"byte_end":123785,"line_start":482,"line_end":482,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123790,"byte_end":123793,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123798,"byte_end":123838,"line_start":484,"line_end":484,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124424,"byte_end":124433,"line_start":502,"line_end":502,"column_start":12,"column_end":21},"name":"swap_take","qualname":"<IndexSet<T, S>>::swap_take","value":"pub fn swap_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":123991,"byte_end":124065,"line_start":492,"line_end":492,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124070,"byte_end":124084,"line_start":493,"line_end":493,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124089,"byte_end":124092,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124097,"byte_end":124170,"line_start":495,"line_end":495,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124175,"byte_end":124238,"line_start":496,"line_end":496,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124243,"byte_end":124298,"line_start":497,"line_end":497,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124303,"byte_end":124306,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124311,"byte_end":124359,"line_start":499,"line_end":499,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124364,"byte_end":124367,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124372,"byte_end":124412,"line_start":501,"line_end":501,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1207},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125026,"byte_end":125036,"line_start":519,"line_end":519,"column_start":12,"column_end":22},"name":"shift_take","qualname":"<IndexSet<T, S>>::shift_take","value":"pub fn shift_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124599,"byte_end":124673,"line_start":509,"line_end":509,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124678,"byte_end":124692,"line_start":510,"line_end":510,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124697,"byte_end":124700,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124705,"byte_end":124772,"line_start":512,"line_end":512,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124777,"byte_end":124838,"line_start":513,"line_end":513,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124843,"byte_end":124900,"line_start":514,"line_end":514,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124905,"byte_end":124908,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124913,"byte_end":124961,"line_start":516,"line_end":516,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124966,"byte_end":124969,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":124974,"byte_end":125014,"line_start":518,"line_end":518,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125555,"byte_end":125571,"line_start":533,"line_end":533,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexSet<T, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125203,"byte_end":125268,"line_start":526,"line_end":526,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125273,"byte_end":125276,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125281,"byte_end":125354,"line_start":528,"line_end":528,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125359,"byte_end":125422,"line_start":529,"line_end":529,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125427,"byte_end":125482,"line_start":530,"line_end":530,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125487,"byte_end":125490,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125495,"byte_end":125543,"line_start":532,"line_end":532,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1213},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126099,"byte_end":126116,"line_start":547,"line_end":547,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexSet<T, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125753,"byte_end":125818,"line_start":540,"line_end":540,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125823,"byte_end":125826,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125831,"byte_end":125898,"line_start":542,"line_end":542,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125903,"byte_end":125964,"line_start":543,"line_end":543,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":125969,"byte_end":126026,"line_start":544,"line_end":544,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126031,"byte_end":126034,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126039,"byte_end":126087,"line_start":546,"line_end":546,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126457,"byte_end":126460,"line_start":559,"line_end":559,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexSet<T, S>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last value","sig":null,"attributes":[{"value":"/ Remove the last value","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126299,"byte_end":126324,"line_start":554,"line_end":554,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126329,"byte_end":126332,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ This preserves the order of the remaining elements.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126337,"byte_end":126392,"line_start":556,"line_end":556,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126397,"byte_end":126400,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126405,"byte_end":126445,"line_start":558,"line_end":558,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126805,"byte_end":126811,"line_start":570,"line_end":570,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexSet<T, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each value in the set and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each value in the set and keep those where the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126538,"byte_end":126601,"line_start":563,"line_end":563,"column_start":5,"column_end":68}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126606,"byte_end":126640,"line_start":564,"line_end":564,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126645,"byte_end":126648,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126653,"byte_end":126725,"line_start":566,"line_end":566,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126730,"byte_end":126740,"line_start":567,"line_end":567,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126745,"byte_end":126748,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126753,"byte_end":126793,"line_start":569,"line_end":569,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1221},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127073,"byte_end":127077,"line_start":580,"line_end":580,"column_start":12,"column_end":16},"name":"sort","qualname":"<IndexSet<T, S>>::sort","value":"pub fn sort(&mut Self) where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values by their default ordering.","sig":null,"attributes":[{"value":"/ Sort the set’s values by their default ordering.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":126947,"byte_end":127001,"line_start":577,"line_end":577,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127006,"byte_end":127009,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ See [`sort_by`](Self::sort_by) for details.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127014,"byte_end":127061,"line_start":579,"line_end":579,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127334,"byte_end":127341,"line_start":590,"line_end":590,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexSet<T, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values in place using the comparison function `cmp`.","sig":null,"attributes":[{"value":"/ Sort the set’s values in place using the comparison function `cmp`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127161,"byte_end":127234,"line_start":587,"line_end":587,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127239,"byte_end":127242,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n)** time and **O(n)** space. The sort is stable.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127247,"byte_end":127322,"line_start":589,"line_end":589,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127636,"byte_end":127645,"line_start":601,"line_end":601,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexSet<T, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<T> where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by-value iterator of\n the values with the result.","sig":null,"attributes":[{"value":"/ Sort the values of the set and return a by-value iterator of","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127488,"byte_end":127552,"line_start":597,"line_end":597,"column_start":5,"column_end":69}},{"value":"/ the values with the result.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127557,"byte_end":127588,"line_start":598,"line_end":598,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127593,"byte_end":127596,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127601,"byte_end":127624,"line_start":600,"line_end":600,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":128062,"byte_end":128075,"line_start":615,"line_end":615,"column_start":12,"column_end":25},"name":"sort_unstable","qualname":"<IndexSet<T, S>>::sort_unstable","value":"pub fn sort_unstable(&mut Self) where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the set's values by their default ordering.","sig":null,"attributes":[{"value":"/ Sort the set's values by their default ordering.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127920,"byte_end":127972,"line_start":612,"line_end":612,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127977,"byte_end":127980,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ See [`sort_unstable_by`](Self::sort_unstable_by) for details.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":127985,"byte_end":128050,"line_start":614,"line_end":614,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":128321,"byte_end":128337,"line_start":625,"line_end":625,"column_start":12,"column_end":28},"name":"sort_unstable_by","qualname":"<IndexSet<T, S>>::sort_unstable_by","value":"pub fn sort_unstable_by<F>(&mut Self, F) where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the set's values in place using the comparison funtion `cmp`.","sig":null,"attributes":[{"value":"/ Sort the set's values in place using the comparison funtion `cmp`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":128168,"byte_end":128238,"line_start":622,"line_end":622,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":128243,"byte_end":128246,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n)** time. The sort is unstable.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":128251,"byte_end":128309,"line_start":624,"line_end":624,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":128604,"byte_end":128622,"line_start":634,"line_end":634,"column_start":12,"column_end":30},"name":"sorted_unstable_by","qualname":"<IndexSet<T, S>>::sorted_unstable_by","value":"pub fn sorted_unstable_by<F>(Self, F) -> IntoIter<T> where F: FnMut(&T, &T) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by-value iterator of\n the values with the result.\n","sig":null,"attributes":[{"value":"/ Sort the values of the set and return a by-value iterator of","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":128492,"byte_end":128556,"line_start":632,"line_end":632,"column_start":5,"column_end":69}},{"value":"/ the values with the result.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":128561,"byte_end":128592,"line_start":633,"line_end":633,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129034,"byte_end":129041,"line_start":648,"line_end":648,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexSet<T, S>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the set’s values in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the set’s values in place.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":128906,"byte_end":128960,"line_start":645,"line_end":645,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":128965,"byte_end":128968,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":128973,"byte_end":129022,"line_start":647,"line_end":647,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129262,"byte_end":129271,"line_start":659,"line_end":659,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexSet<T, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a value by index","sig":null,"attributes":[{"value":"/ Get a value by index","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129123,"byte_end":129147,"line_start":654,"line_end":654,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129152,"byte_end":129155,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129160,"byte_end":129207,"line_start":656,"line_end":656,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129212,"byte_end":129215,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129220,"byte_end":129250,"line_start":658,"line_end":658,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129456,"byte_end":129461,"line_start":666,"line_end":666,"column_start":12,"column_end":17},"name":"first","qualname":"<IndexSet<T, S>>::first","value":"pub fn first(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get the first value","sig":null,"attributes":[{"value":"/ Get the first value","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129378,"byte_end":129401,"line_start":663,"line_end":663,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129406,"byte_end":129409,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129414,"byte_end":129444,"line_start":665,"line_end":665,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129628,"byte_end":129632,"line_start":673,"line_end":673,"column_start":12,"column_end":16},"name":"last","qualname":"<IndexSet<T, S>>::last","value":"pub fn last(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get the last value","sig":null,"attributes":[{"value":"/ Get the last value","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129551,"byte_end":129573,"line_start":670,"line_end":670,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129578,"byte_end":129581,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129586,"byte_end":129616,"line_start":672,"line_end":672,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130089,"byte_end":130106,"line_start":686,"line_end":686,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexSet<T, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value by index","sig":null,"attributes":[{"value":"/ Remove the value by index","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129721,"byte_end":129750,"line_start":677,"line_end":677,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129755,"byte_end":129758,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129763,"byte_end":129810,"line_start":679,"line_end":679,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129815,"byte_end":129818,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129823,"byte_end":129896,"line_start":681,"line_end":681,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129901,"byte_end":129964,"line_start":682,"line_end":682,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129969,"byte_end":130024,"line_start":683,"line_end":683,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130029,"byte_end":130032,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130037,"byte_end":130077,"line_start":685,"line_end":685,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130579,"byte_end":130597,"line_start":699,"line_end":699,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexSet<T, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value by index","sig":null,"attributes":[{"value":"/ Remove the value by index","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130217,"byte_end":130246,"line_start":690,"line_end":690,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130251,"byte_end":130254,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130259,"byte_end":130306,"line_start":692,"line_end":692,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130311,"byte_end":130314,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130319,"byte_end":130386,"line_start":694,"line_end":694,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130391,"byte_end":130452,"line_start":695,"line_end":695,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130457,"byte_end":130514,"line_start":696,"line_end":696,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130519,"byte_end":130522,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130527,"byte_end":130567,"line_start":698,"line_end":698,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":131144,"byte_end":131154,"line_start":712,"line_end":712,"column_start":12,"column_end":22},"name":"move_index","qualname":"<IndexSet<T, S>>::move_index","value":"pub fn move_index(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Moves the position of a value from one index to another\n by shifting all other values in-between.","sig":null,"attributes":[{"value":"/ Moves the position of a value from one index to another","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130709,"byte_end":130768,"line_start":703,"line_end":703,"column_start":5,"column_end":64}},{"value":"/ by shifting all other values in-between.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130773,"byte_end":130817,"line_start":704,"line_end":704,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130822,"byte_end":130825,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ * If `from < to`, the other values will shift down while the targeted value moves up.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130830,"byte_end":130919,"line_start":706,"line_end":706,"column_start":5,"column_end":94}},{"value":"/ * If `from > to`, the other values will shift up while the targeted value moves down.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":130924,"byte_end":131013,"line_start":707,"line_end":707,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":131018,"byte_end":131021,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `from` or `to` are out of bounds.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":131026,"byte_end":131079,"line_start":709,"line_end":709,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":131084,"byte_end":131087,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":131092,"byte_end":131132,"line_start":711,"line_end":711,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":131363,"byte_end":131375,"line_start":719,"line_end":719,"column_start":12,"column_end":24},"name":"swap_indices","qualname":"<IndexSet<T, S>>::swap_indices","value":"pub fn swap_indices(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the position of two values in the set.","sig":null,"attributes":[{"value":"/ Swaps the position of two values in the set.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":131241,"byte_end":131289,"line_start":716,"line_end":716,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":131294,"byte_end":131297,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `a` or `b` are out of bounds.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":131302,"byte_end":131351,"line_start":718,"line_end":718,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132758,"byte_end":132766,"line_start":771,"line_end":771,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1255}],"decl_id":null,"docs":" An owning iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `IndexSet`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132439,"byte_end":132493,"line_start":764,"line_end":764,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132494,"byte_end":132497,"line_start":765,"line_end":765,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexSet`]","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132498,"byte_end":132570,"line_start":766,"line_end":766,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132571,"byte_end":132646,"line_start":767,"line_end":767,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132647,"byte_end":132650,"line_start":768,"line_end":768,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132651,"byte_end":132689,"line_start":769,"line_end":769,"column_start":1,"column_end":39}},{"value":"/ [`into_iter`]: struct.IndexSet.html#method.into_iter","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132690,"byte_end":132746,"line_start":770,"line_end":770,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1269},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133645,"byte_end":133649,"line_start":807,"line_end":807,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1272}],"decl_id":null,"docs":" An iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `IndexSet`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133387,"byte_end":133434,"line_start":800,"line_end":800,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133435,"byte_end":133438,"line_start":801,"line_end":801,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexSet`].","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133439,"byte_end":133507,"line_start":802,"line_end":802,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133508,"byte_end":133543,"line_start":803,"line_end":803,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133544,"byte_end":133547,"line_start":804,"line_end":804,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133548,"byte_end":133586,"line_start":805,"line_end":805,"column_start":1,"column_end":39}},{"value":"/ [`iter`]: struct.IndexSet.html#method.iter","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133587,"byte_end":133633,"line_start":806,"line_end":806,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1290},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134633,"byte_end":134638,"line_start":850,"line_end":850,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1293}],"decl_id":null,"docs":" A draining iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `IndexSet`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134364,"byte_end":134419,"line_start":843,"line_end":843,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134420,"byte_end":134423,"line_start":844,"line_end":844,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexSet`].","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134424,"byte_end":134493,"line_start":845,"line_end":845,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134494,"byte_end":134529,"line_start":846,"line_end":846,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134530,"byte_end":134533,"line_start":847,"line_end":847,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134534,"byte_end":134572,"line_start":848,"line_end":848,"column_start":1,"column_end":39}},{"value":"/ [`drain`]: struct.IndexSet.html#method.drain","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134573,"byte_end":134621,"line_start":849,"line_end":849,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":137599,"byte_end":137610,"line_start":989,"line_end":989,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, S>>::is_disjoint","value":"pub fn is_disjoint<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":137519,"byte_end":137587,"line_start":988,"line_end":988,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1363},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":137985,"byte_end":137994,"line_start":1001,"line_end":1001,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, S>>::is_subset","value":"pub fn is_subset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `self` are contained in `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `self` are contained in `other`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":137903,"byte_end":137973,"line_start":1000,"line_end":1000,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":138262,"byte_end":138273,"line_start":1009,"line_end":1009,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, S>>::is_superset","value":"pub fn is_superset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `other` are contained in `self`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `other` are contained in `self`.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":138180,"byte_end":138250,"line_start":1008,"line_end":1008,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1368},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":138699,"byte_end":138709,"line_start":1024,"line_end":1024,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1372},{"krate":0,"index":1373}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `IndexSet`s.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":138398,"byte_end":138470,"line_start":1017,"line_end":1017,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":138471,"byte_end":138474,"line_start":1018,"line_end":1018,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`IndexSet`].","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":138475,"byte_end":138549,"line_start":1019,"line_end":1019,"column_start":1,"column_end":75}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":138550,"byte_end":138585,"line_start":1020,"line_end":1020,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":138586,"byte_end":138589,"line_start":1021,"line_end":1021,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":138590,"byte_end":138628,"line_start":1022,"line_end":1022,"column_start":1,"column_end":39}},{"value":"/ [`difference`]: struct.IndexSet.html#method.difference","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":138629,"byte_end":138687,"line_start":1023,"line_end":1023,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1396},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":140361,"byte_end":140373,"line_start":1098,"line_end":1098,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1401}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `IndexSet`s.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":140052,"byte_end":140126,"line_start":1091,"line_end":1091,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":140127,"byte_end":140130,"line_start":1092,"line_end":1092,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`IndexSet`].","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":140131,"byte_end":140207,"line_start":1093,"line_end":1093,"column_start":1,"column_end":77}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":140208,"byte_end":140243,"line_start":1094,"line_end":1094,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":140244,"byte_end":140247,"line_start":1095,"line_end":1095,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":140248,"byte_end":140286,"line_start":1096,"line_end":1096,"column_start":1,"column_end":39}},{"value":"/ [`intersection`]: struct.IndexSet.html#method.intersection","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":140287,"byte_end":140349,"line_start":1097,"line_end":1097,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1424},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":142067,"byte_end":142086,"line_start":1172,"line_end":1172,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1429}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141726,"byte_end":141808,"line_start":1165,"line_end":1165,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141809,"byte_end":141812,"line_start":1166,"line_end":1166,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141813,"byte_end":141883,"line_start":1167,"line_end":1167,"column_start":1,"column_end":71}},{"value":"/ [`IndexSet`]. See its documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141884,"byte_end":141933,"line_start":1168,"line_end":1168,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141934,"byte_end":141937,"line_start":1169,"line_end":1169,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141938,"byte_end":141976,"line_start":1170,"line_end":1170,"column_start":1,"column_end":39}},{"value":"/ [`symmetric_difference`]: struct.IndexSet.html#method.symmetric_difference","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141977,"byte_end":142055,"line_start":1171,"line_end":1171,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1463},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143883,"byte_end":143888,"line_start":1252,"line_end":1252,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1467}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `IndexSet`s.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143602,"byte_end":143669,"line_start":1245,"line_end":1245,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143670,"byte_end":143673,"line_start":1246,"line_end":1246,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`IndexSet`].","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143674,"byte_end":143743,"line_start":1247,"line_end":1247,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143744,"byte_end":143779,"line_start":1248,"line_end":1248,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143780,"byte_end":143783,"line_start":1249,"line_end":1249,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143784,"byte_end":143822,"line_start":1250,"line_end":1250,"column_start":1,"column_end":39}},{"value":"/ [`union`]: struct.IndexSet.html#method.union","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143823,"byte_end":143871,"line_start":1251,"line_end":1251,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1549},"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":5215,"byte_end":5220,"line_start":186,"line_end":186,"column_start":10,"column_end":15},"name":"Entry","qualname":"::Entries::Entry","value":"type Entry;","parent":{"krate":0,"index":1548},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":11208,"byte_end":11209,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":13039,"byte_end":13047,"line_start":51,"line_end":51,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":13950,"byte_end":13958,"line_start":14,"line_end":14,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":14292,"byte_end":14307,"line_start":30,"line_end":30,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":15029,"byte_end":15037,"line_start":58,"line_end":58,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":15385,"byte_end":15393,"line_start":72,"line_end":72,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":15817,"byte_end":15825,"line_start":89,"line_end":89,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":16134,"byte_end":16149,"line_start":104,"line_end":104,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":16827,"byte_end":16835,"line_start":131,"line_end":131,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":17152,"byte_end":17160,"line_start":144,"line_end":144,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":19248,"byte_end":19258,"line_start":61,"line_end":61,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":102831,"byte_end":102843,"line_start":26,"line_end":26,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":103143,"byte_end":103155,"line_start":34,"line_end":34,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106204,"byte_end":106217,"line_start":116,"line_end":116,"column_start":40,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106332,"byte_end":106345,"line_start":119,"line_end":119,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":80180,"byte_end":80192,"line_start":59,"line_end":59,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":80878,"byte_end":80890,"line_start":82,"line_end":82,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":81209,"byte_end":81221,"line_start":95,"line_end":95,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":81724,"byte_end":81736,"line_start":122,"line_end":122,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":461},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95268,"byte_end":95273,"line_start":499,"line_end":499,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":98330,"byte_end":98335,"line_start":589,"line_end":589,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":98739,"byte_end":98752,"line_start":601,"line_end":601,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100313,"byte_end":100326,"line_start":644,"line_end":644,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100805,"byte_end":100816,"line_start":663,"line_end":663,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":101519,"byte_end":101530,"line_start":687,"line_end":687,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":24004,"byte_end":24012,"line_start":81,"line_end":81,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":24410,"byte_end":24418,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":24942,"byte_end":24950,"line_start":126,"line_end":126,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25412,"byte_end":25420,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25846,"byte_end":25854,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30537,"byte_end":30545,"line_start":319,"line_end":319,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":671},{"krate":0,"index":673},{"krate":0,"index":675},{"krate":0,"index":677},{"krate":0,"index":679},{"krate":0,"index":681},{"krate":0,"index":683},{"krate":0,"index":685},{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":695},{"krate":0,"index":697},{"krate":0,"index":699},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":714},{"krate":0,"index":717},{"krate":0,"index":720},{"krate":0,"index":724},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45205,"byte_end":45213,"line_start":775,"line_end":775,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48721,"byte_end":48725,"line_start":880,"line_end":880,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":751},{"krate":0,"index":1555},{"krate":0,"index":1556},{"krate":0,"index":1557},{"krate":0,"index":1558},{"krate":0,"index":1559},{"krate":0,"index":1560}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48840,"byte_end":48844,"line_start":886,"line_end":886,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1562},{"krate":0,"index":1563}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48946,"byte_end":48950,"line_start":890,"line_end":890,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49054,"byte_end":49058,"line_start":896,"line_end":896,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49149,"byte_end":49153,"line_start":899,"line_end":899,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49305,"byte_end":49309,"line_start":907,"line_end":907,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49810,"byte_end":49818,"line_start":924,"line_end":924,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":1569}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49921,"byte_end":49929,"line_start":930,"line_end":930,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1571},{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50023,"byte_end":50031,"line_start":934,"line_end":934,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50131,"byte_end":50139,"line_start":940,"line_end":940,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50188,"byte_end":50196,"line_start":942,"line_end":942,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50746,"byte_end":50752,"line_start":960,"line_end":960,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50869,"byte_end":50875,"line_start":966,"line_end":966,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1580},{"krate":0,"index":1581}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50979,"byte_end":50985,"line_start":970,"line_end":970,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51089,"byte_end":51095,"line_start":976,"line_end":976,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51186,"byte_end":51192,"line_start":979,"line_end":979,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51346,"byte_end":51352,"line_start":987,"line_end":987,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51870,"byte_end":51879,"line_start":1004,"line_end":1004,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":829},{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1587}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52000,"byte_end":52009,"line_start":1010,"line_end":1010,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1589},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52113,"byte_end":52122,"line_start":1014,"line_end":1014,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52226,"byte_end":52235,"line_start":1020,"line_end":1020,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52288,"byte_end":52297,"line_start":1022,"line_end":1022,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52871,"byte_end":52881,"line_start":1040,"line_end":1040,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":851},{"krate":0,"index":1591},{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1596}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52986,"byte_end":52996,"line_start":1046,"line_end":1046,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1598},{"krate":0,"index":1599}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53092,"byte_end":53102,"line_start":1050,"line_end":1050,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53202,"byte_end":53212,"line_start":1056,"line_end":1056,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53261,"byte_end":53271,"line_start":1058,"line_end":1058,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53816,"byte_end":53820,"line_start":1076,"line_end":1076,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1605}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53941,"byte_end":53945,"line_start":1082,"line_end":1082,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1607},{"krate":0,"index":1608}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54044,"byte_end":54048,"line_start":1086,"line_end":1086,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54152,"byte_end":54156,"line_start":1092,"line_end":1092,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54247,"byte_end":54251,"line_start":1095,"line_end":1095,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54415,"byte_end":54419,"line_start":1103,"line_end":1103,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54930,"byte_end":54937,"line_start":1120,"line_end":1120,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":903},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55065,"byte_end":55072,"line_start":1126,"line_end":1126,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1616},{"krate":0,"index":1617}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55174,"byte_end":55181,"line_start":1130,"line_end":1130,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55285,"byte_end":55292,"line_start":1136,"line_end":1136,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55357,"byte_end":55364,"line_start":1138,"line_end":1138,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55965,"byte_end":55973,"line_start":1156,"line_end":1156,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":925},{"krate":0,"index":1618},{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56087,"byte_end":56095,"line_start":1162,"line_end":1162,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1625},{"krate":0,"index":1626}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56195,"byte_end":56203,"line_start":1166,"line_end":1166,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56303,"byte_end":56311,"line_start":1172,"line_end":1172,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56372,"byte_end":56380,"line_start":1174,"line_end":1174,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56940,"byte_end":56945,"line_start":1192,"line_end":1192,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1632}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":57063,"byte_end":57068,"line_start":1198,"line_end":1198,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1634},{"krate":0,"index":1635}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":57172,"byte_end":57177,"line_start":1202,"line_end":1202,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":57281,"byte_end":57286,"line_start":1208,"line_end":1208,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":57351,"byte_end":57356,"line_start":1210,"line_end":1210,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":57997,"byte_end":58005,"line_start":1233,"line_end":1233,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":58789,"byte_end":58797,"line_start":1265,"line_end":1265,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":59965,"byte_end":59973,"line_start":1310,"line_end":1310,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":61050,"byte_end":61058,"line_start":1352,"line_end":1352,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1003},{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":62152,"byte_end":62160,"line_start":1394,"line_end":1394,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":62508,"byte_end":62516,"line_start":1405,"line_end":1405,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":63132,"byte_end":63140,"line_start":1425,"line_end":1425,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":63533,"byte_end":63541,"line_start":1443,"line_end":1443,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":64840,"byte_end":64848,"line_start":1476,"line_end":1476,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":65244,"byte_end":65252,"line_start":1490,"line_end":1490,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":65472,"byte_end":65480,"line_start":1500,"line_end":1500,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":65845,"byte_end":65853,"line_start":1517,"line_end":1517,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111528,"byte_end":111536,"line_start":71,"line_end":71,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1128},{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111798,"byte_end":111806,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":112317,"byte_end":112325,"line_start":113,"line_end":113,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1142}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":112722,"byte_end":112730,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1145},{"krate":0,"index":1146}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113163,"byte_end":113171,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1161}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116314,"byte_end":116322,"line_start":252,"line_end":252,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1171},{"krate":0,"index":1174},{"krate":0,"index":1177},{"krate":0,"index":1180},{"krate":0,"index":1183},{"krate":0,"index":1185},{"krate":0,"index":1188},{"krate":0,"index":1191},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1198},{"krate":0,"index":1200},{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1207},{"krate":0,"index":1210},{"krate":0,"index":1213},{"krate":0,"index":1216},{"krate":0,"index":1218},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1225},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1232},{"krate":0,"index":1235}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129102,"byte_end":129110,"line_start":653,"line_end":653,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132142,"byte_end":132150,"line_start":752,"line_end":752,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1252}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132832,"byte_end":132840,"line_start":775,"line_end":775,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1258},{"krate":0,"index":1636},{"krate":0,"index":1637},{"krate":0,"index":1638},{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132937,"byte_end":132945,"line_start":781,"line_end":781,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1643},{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133033,"byte_end":133041,"line_start":785,"line_end":785,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1263}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133135,"byte_end":133143,"line_start":791,"line_end":791,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133186,"byte_end":133194,"line_start":793,"line_end":793,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133725,"byte_end":133729,"line_start":811,"line_end":811,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1645},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133838,"byte_end":133842,"line_start":817,"line_end":817,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1652},{"krate":0,"index":1653}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133938,"byte_end":133942,"line_start":821,"line_end":821,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134040,"byte_end":134044,"line_start":827,"line_end":827,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134074,"byte_end":134078,"line_start":829,"line_end":829,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1286}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134224,"byte_end":134228,"line_start":837,"line_end":837,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1289}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134709,"byte_end":134714,"line_start":854,"line_end":854,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1296},{"krate":0,"index":1654},{"krate":0,"index":1655},{"krate":0,"index":1656},{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134815,"byte_end":134820,"line_start":860,"line_end":860,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1661},{"krate":0,"index":1662}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134912,"byte_end":134917,"line_start":864,"line_end":864,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1301}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":135015,"byte_end":135020,"line_start":870,"line_end":870,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":135067,"byte_end":135072,"line_start":872,"line_end":872,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":135479,"byte_end":135487,"line_start":888,"line_end":888,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":135712,"byte_end":135720,"line_start":899,"line_end":899,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":136047,"byte_end":136055,"line_start":913,"line_end":913,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":136421,"byte_end":136429,"line_start":931,"line_end":931,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":136680,"byte_end":136688,"line_start":942,"line_end":942,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1342}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":136933,"byte_end":136941,"line_start":953,"line_end":953,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1347}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":137157,"byte_end":137165,"line_start":965,"line_end":965,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1352}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":137379,"byte_end":137387,"line_start":976,"line_end":976,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":137454,"byte_end":137462,"line_start":983,"line_end":983,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1359},{"krate":0,"index":1363},{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":138807,"byte_end":138817,"line_start":1029,"line_end":1029,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":139251,"byte_end":139261,"line_start":1050,"line_end":1050,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":139579,"byte_end":139589,"line_start":1065,"line_end":1065,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":139670,"byte_end":139680,"line_start":1072,"line_end":1072,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":139846,"byte_end":139856,"line_start":1081,"line_end":1081,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":140471,"byte_end":140483,"line_start":1103,"line_end":1103,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":140916,"byte_end":140928,"line_start":1124,"line_end":1124,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141245,"byte_end":141257,"line_start":1139,"line_end":1139,"column_start":30,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141338,"byte_end":141350,"line_start":1146,"line_end":1146,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141518,"byte_end":141530,"line_start":1155,"line_end":1155,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":142203,"byte_end":142222,"line_start":1176,"line_end":1176,"column_start":34,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":142677,"byte_end":142696,"line_start":1200,"line_end":1200,"column_start":41,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1445},{"krate":0,"index":1446}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143044,"byte_end":143063,"line_start":1218,"line_end":1218,"column_start":35,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143176,"byte_end":143195,"line_start":1226,"line_end":1226,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1457}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143360,"byte_end":143379,"line_start":1234,"line_end":1234,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1462}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143984,"byte_end":143989,"line_start":1256,"line_end":1256,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1475}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":144412,"byte_end":144417,"line_start":1279,"line_end":1279,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":144733,"byte_end":144738,"line_start":1296,"line_end":1296,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":144819,"byte_end":144824,"line_start":1303,"line_end":1303,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1491}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":144965,"byte_end":144970,"line_start":1311,"line_end":1311,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1495}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":3891,"byte_end":3900,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1530}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":4098,"byte_end":4104,"line_start":134,"line_end":134,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1534},{"krate":0,"index":1535}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":4497,"byte_end":4503,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":3334,"byte_end":3343,"line_start":95,"line_end":95,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":191}},{"kind":"Mod","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":3364,"byte_end":3367,"line_start":98,"line_end":98,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":275}},{"kind":"Mod","span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":3377,"byte_end":3380,"line_start":99,"line_end":99,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1056}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\equivalent.rs","byte_start":11208,"byte_end":11209,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":26},"to":{"krate":0,"index":22}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\mutable_keys.rs","byte_start":13039,"byte_end":13047,"line_start":51,"line_end":51,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":603},"to":{"krate":0,"index":45}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":13950,"byte_end":13958,"line_start":14,"line_end":14,"column_start":29,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":603},"to":{"krate":16,"index":2118}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":14292,"byte_end":14307,"line_start":30,"line_end":30,"column_start":37,"column_end":52},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":127},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":15029,"byte_end":15037,"line_start":58,"line_end":58,"column_start":41,"column_end":49},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":603},"to":{"krate":16,"index":1577}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":15385,"byte_end":15393,"line_start":72,"line_end":72,"column_start":52,"column_end":60},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":603},"to":{"krate":16,"index":1795}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":15817,"byte_end":15825,"line_start":89,"line_end":89,"column_start":26,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1121},"to":{"krate":16,"index":2118}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":16134,"byte_end":16149,"line_start":104,"line_end":104,"column_start":34,"column_end":49},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":165},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":16827,"byte_end":16835,"line_start":131,"line_end":131,"column_start":38,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1121},"to":{"krate":16,"index":1577}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde.rs","byte_start":17152,"byte_end":17160,"line_start":144,"line_end":144,"column_start":49,"column_end":57},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1121},"to":{"krate":16,"index":1795}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\serde_seq.rs","byte_start":19248,"byte_end":19258,"line_start":61,"line_end":61,"column_start":37,"column_end":47},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":237},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":102831,"byte_end":102843,"line_start":26,"line_end":26,"column_start":21,"column_end":33},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":310},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":103143,"byte_end":103155,"line_start":34,"line_end":34,"column_start":12,"column_end":24},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106204,"byte_end":106217,"line_start":116,"line_end":116,"column_start":40,"column_end":53},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":328},"to":{"krate":1,"index":3069}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core\\raw.rs","byte_start":106332,"byte_end":106345,"line_start":119,"line_end":119,"column_start":16,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":80180,"byte_end":80192,"line_start":59,"line_end":59,"column_start":22,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":80878,"byte_end":80890,"line_start":82,"line_end":82,"column_start":27,"column_end":39},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":81209,"byte_end":81221,"line_start":95,"line_end":95,"column_start":24,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":388},"to":{"krate":0,"index":1548}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":81724,"byte_end":81736,"line_start":122,"line_end":122,"column_start":12,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":95268,"byte_end":95273,"line_start":499,"line_end":499,"column_start":16,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":98330,"byte_end":98335,"line_start":589,"line_end":589,"column_start":51,"column_end":56},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":463},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":98739,"byte_end":98752,"line_start":601,"line_end":601,"column_start":12,"column_end":25},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100313,"byte_end":100326,"line_start":644,"line_end":644,"column_start":51,"column_end":64},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":328},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":100805,"byte_end":100816,"line_start":663,"line_end":663,"column_start":16,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map\\core.rs","byte_start":101519,"byte_end":101530,"line_start":687,"line_end":687,"column_start":39,"column_end":50},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":506},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":24004,"byte_end":24012,"line_start":81,"line_end":81,"column_start":25,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":24410,"byte_end":24418,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":603},"to":{"krate":0,"index":1548}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":24942,"byte_end":24950,"line_start":126,"line_end":126,"column_start":30,"column_end":38},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25412,"byte_end":25420,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":25846,"byte_end":25854,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":30537,"byte_end":30545,"line_start":319,"line_end":319,"column_start":15,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":45205,"byte_end":45213,"line_start":775,"line_end":775,"column_start":15,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48721,"byte_end":48725,"line_start":880,"line_end":880,"column_start":29,"column_end":33},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":742},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48840,"byte_end":48844,"line_start":886,"line_end":886,"column_start":36,"column_end":40},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":742},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":48946,"byte_end":48950,"line_start":890,"line_end":890,"column_start":34,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":742},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49054,"byte_end":49058,"line_start":896,"line_end":896,"column_start":30,"column_end":34},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":742},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49149,"byte_end":49153,"line_start":899,"line_end":899,"column_start":22,"column_end":26},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":742},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49305,"byte_end":49309,"line_start":907,"line_end":907,"column_start":39,"column_end":43},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":742},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49810,"byte_end":49818,"line_start":924,"line_end":924,"column_start":25,"column_end":33},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":770},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":49921,"byte_end":49929,"line_start":930,"line_end":930,"column_start":36,"column_end":44},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":770},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50023,"byte_end":50031,"line_start":934,"line_end":934,"column_start":34,"column_end":42},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":770},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50131,"byte_end":50139,"line_start":940,"line_end":940,"column_start":30,"column_end":38},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":770},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50188,"byte_end":50196,"line_start":942,"line_end":942,"column_start":39,"column_end":47},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":770},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50746,"byte_end":50752,"line_start":960,"line_end":960,"column_start":29,"column_end":35},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50869,"byte_end":50875,"line_start":966,"line_end":966,"column_start":36,"column_end":42},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":50979,"byte_end":50985,"line_start":970,"line_end":970,"column_start":34,"column_end":40},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51089,"byte_end":51095,"line_start":976,"line_end":976,"column_start":30,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51186,"byte_end":51192,"line_start":979,"line_end":979,"column_start":22,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51346,"byte_end":51352,"line_start":987,"line_end":987,"column_start":39,"column_end":45},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":51870,"byte_end":51879,"line_start":1004,"line_end":1004,"column_start":29,"column_end":38},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":820},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52000,"byte_end":52009,"line_start":1010,"line_end":1010,"column_start":36,"column_end":45},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":820},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52113,"byte_end":52122,"line_start":1014,"line_end":1014,"column_start":34,"column_end":43},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":820},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52226,"byte_end":52235,"line_start":1020,"line_end":1020,"column_start":30,"column_end":39},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":820},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52288,"byte_end":52297,"line_start":1022,"line_end":1022,"column_start":39,"column_end":48},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":820},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52871,"byte_end":52881,"line_start":1040,"line_end":1040,"column_start":25,"column_end":35},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":844},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":52986,"byte_end":52996,"line_start":1046,"line_end":1046,"column_start":36,"column_end":46},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":844},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53092,"byte_end":53102,"line_start":1050,"line_end":1050,"column_start":34,"column_end":44},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":844},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53202,"byte_end":53212,"line_start":1056,"line_end":1056,"column_start":30,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":844},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53261,"byte_end":53271,"line_start":1058,"line_end":1058,"column_start":39,"column_end":49},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":844},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53816,"byte_end":53820,"line_start":1076,"line_end":1076,"column_start":29,"column_end":33},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":866},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":53941,"byte_end":53945,"line_start":1082,"line_end":1082,"column_start":36,"column_end":40},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":866},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54044,"byte_end":54048,"line_start":1086,"line_end":1086,"column_start":34,"column_end":38},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":866},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54152,"byte_end":54156,"line_start":1092,"line_end":1092,"column_start":30,"column_end":34},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":866},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54247,"byte_end":54251,"line_start":1095,"line_end":1095,"column_start":22,"column_end":26},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":866},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54415,"byte_end":54419,"line_start":1103,"line_end":1103,"column_start":51,"column_end":55},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":866},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":54930,"byte_end":54937,"line_start":1120,"line_end":1120,"column_start":29,"column_end":36},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":894},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55065,"byte_end":55072,"line_start":1126,"line_end":1126,"column_start":36,"column_end":43},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":894},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55174,"byte_end":55181,"line_start":1130,"line_end":1130,"column_start":34,"column_end":41},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":894},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55285,"byte_end":55292,"line_start":1136,"line_end":1136,"column_start":30,"column_end":37},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":894},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55357,"byte_end":55364,"line_start":1138,"line_end":1138,"column_start":51,"column_end":58},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":894},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":55965,"byte_end":55973,"line_start":1156,"line_end":1156,"column_start":25,"column_end":33},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":918},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56087,"byte_end":56095,"line_start":1162,"line_end":1162,"column_start":36,"column_end":44},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":918},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56195,"byte_end":56203,"line_start":1166,"line_end":1166,"column_start":34,"column_end":42},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":918},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56303,"byte_end":56311,"line_start":1172,"line_end":1172,"column_start":30,"column_end":38},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":918},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56372,"byte_end":56380,"line_start":1174,"line_end":1174,"column_start":51,"column_end":59},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":918},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":56940,"byte_end":56945,"line_start":1192,"line_end":1192,"column_start":25,"column_end":30},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":940},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":57063,"byte_end":57068,"line_start":1198,"line_end":1198,"column_start":36,"column_end":41},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":940},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":57172,"byte_end":57177,"line_start":1202,"line_end":1202,"column_start":34,"column_end":39},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":940},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":57281,"byte_end":57286,"line_start":1208,"line_end":1208,"column_start":30,"column_end":35},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":940},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":57351,"byte_end":57356,"line_start":1210,"line_end":1210,"column_start":51,"column_end":56},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":940},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":57997,"byte_end":58005,"line_start":1233,"line_end":1233,"column_start":32,"column_end":40},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":7790}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":58789,"byte_end":58797,"line_start":1265,"line_end":1265,"column_start":40,"column_end":48},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":3361}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":59965,"byte_end":59973,"line_start":1310,"line_end":1310,"column_start":43,"column_end":51},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":3365}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":61050,"byte_end":61058,"line_start":1352,"line_end":1352,"column_start":32,"column_end":40},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":3361}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":62152,"byte_end":62160,"line_start":1394,"line_end":1394,"column_start":35,"column_end":43},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":3365}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":62508,"byte_end":62516,"line_start":1405,"line_end":1405,"column_start":40,"column_end":48},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":7786}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":63132,"byte_end":63140,"line_start":1425,"line_end":1425,"column_start":50,"column_end":58},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":63533,"byte_end":63541,"line_start":1443,"line_end":1443,"column_start":34,"column_end":42},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":7799}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":64840,"byte_end":64848,"line_start":1476,"line_end":1476,"column_start":46,"column_end":54},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":7799}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":65244,"byte_end":65252,"line_start":1490,"line_end":1490,"column_start":27,"column_end":35},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":65472,"byte_end":65480,"line_start":1500,"line_end":1500,"column_start":60,"column_end":68},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":2709}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\map.rs","byte_start":65845,"byte_end":65853,"line_start":1517,"line_end":1517,"column_start":22,"column_end":30},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":2714}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111528,"byte_end":111536,"line_start":71,"line_end":71,"column_start":22,"column_end":30},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1121},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":111798,"byte_end":111806,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1121},"to":{"krate":0,"index":1548}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":112317,"byte_end":112325,"line_start":113,"line_end":113,"column_start":27,"column_end":35},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1121},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":112722,"byte_end":112730,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":113163,"byte_end":113171,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":116314,"byte_end":116322,"line_start":252,"line_end":252,"column_start":12,"column_end":20},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":129102,"byte_end":129110,"line_start":653,"line_end":653,"column_start":12,"column_end":20},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132142,"byte_end":132150,"line_start":752,"line_end":752,"column_start":29,"column_end":37},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1121},"to":{"krate":1,"index":3361}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132832,"byte_end":132840,"line_start":775,"line_end":775,"column_start":22,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1253},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":132937,"byte_end":132945,"line_start":781,"line_end":781,"column_start":33,"column_end":41},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1253},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133033,"byte_end":133041,"line_start":785,"line_end":785,"column_start":31,"column_end":39},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1253},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133135,"byte_end":133143,"line_start":791,"line_end":791,"column_start":27,"column_end":35},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1253},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133186,"byte_end":133194,"line_start":793,"line_end":793,"column_start":36,"column_end":44},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1253},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133725,"byte_end":133729,"line_start":811,"line_end":811,"column_start":26,"column_end":30},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133838,"byte_end":133842,"line_start":817,"line_end":817,"column_start":33,"column_end":37},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":133938,"byte_end":133942,"line_start":821,"line_end":821,"column_start":31,"column_end":35},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134040,"byte_end":134044,"line_start":827,"line_end":827,"column_start":27,"column_end":31},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134074,"byte_end":134078,"line_start":829,"line_end":829,"column_start":19,"column_end":23},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134224,"byte_end":134228,"line_start":837,"line_end":837,"column_start":36,"column_end":40},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134709,"byte_end":134714,"line_start":854,"line_end":854,"column_start":22,"column_end":27},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1290},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134815,"byte_end":134820,"line_start":860,"line_end":860,"column_start":33,"column_end":38},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1290},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":134912,"byte_end":134917,"line_start":864,"line_end":864,"column_start":31,"column_end":36},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1290},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":135015,"byte_end":135020,"line_start":870,"line_end":870,"column_start":27,"column_end":32},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1290},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":135067,"byte_end":135072,"line_start":872,"line_end":872,"column_start":36,"column_end":41},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1290},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":135479,"byte_end":135487,"line_start":888,"line_end":888,"column_start":29,"column_end":37},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1121},"to":{"krate":1,"index":7790}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":135712,"byte_end":135720,"line_start":899,"line_end":899,"column_start":32,"column_end":40},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1121},"to":{"krate":1,"index":7786}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":136047,"byte_end":136055,"line_start":913,"line_end":913,"column_start":42,"column_end":50},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1121},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":136421,"byte_end":136429,"line_start":931,"line_end":931,"column_start":26,"column_end":34},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1121},"to":{"krate":1,"index":7799}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":136680,"byte_end":136688,"line_start":942,"line_end":942,"column_start":34,"column_end":42},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1121},"to":{"krate":1,"index":7799}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":136933,"byte_end":136941,"line_start":953,"line_end":953,"column_start":24,"column_end":32},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1121},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":137157,"byte_end":137165,"line_start":965,"line_end":965,"column_start":48,"column_end":56},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1121},"to":{"krate":1,"index":2709}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":137379,"byte_end":137387,"line_start":976,"line_end":976,"column_start":19,"column_end":27},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1121},"to":{"krate":1,"index":2714}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":137454,"byte_end":137462,"line_start":983,"line_end":983,"column_start":12,"column_end":20},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":138807,"byte_end":138817,"line_start":1029,"line_end":1029,"column_start":29,"column_end":39},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1368},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":139251,"byte_end":139261,"line_start":1050,"line_end":1050,"column_start":36,"column_end":46},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1368},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":139579,"byte_end":139589,"line_start":1065,"line_end":1065,"column_start":30,"column_end":40},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1368},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":139670,"byte_end":139680,"line_start":1072,"line_end":1072,"column_start":22,"column_end":32},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1368},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":139846,"byte_end":139856,"line_start":1081,"line_end":1081,"column_start":27,"column_end":37},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1368},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":140471,"byte_end":140483,"line_start":1103,"line_end":1103,"column_start":29,"column_end":41},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1396},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":140916,"byte_end":140928,"line_start":1124,"line_end":1124,"column_start":36,"column_end":48},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1396},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141245,"byte_end":141257,"line_start":1139,"line_end":1139,"column_start":30,"column_end":42},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1396},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141338,"byte_end":141350,"line_start":1146,"line_end":1146,"column_start":22,"column_end":34},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1396},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":141518,"byte_end":141530,"line_start":1155,"line_end":1155,"column_start":27,"column_end":39},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1396},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":142203,"byte_end":142222,"line_start":1176,"line_end":1176,"column_start":34,"column_end":53},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1424},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":142677,"byte_end":142696,"line_start":1200,"line_end":1200,"column_start":41,"column_end":60},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1424},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143044,"byte_end":143063,"line_start":1218,"line_end":1218,"column_start":35,"column_end":54},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1424},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143176,"byte_end":143195,"line_start":1226,"line_end":1226,"column_start":27,"column_end":46},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1424},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143360,"byte_end":143379,"line_start":1234,"line_end":1234,"column_start":32,"column_end":51},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1424},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":143984,"byte_end":143989,"line_start":1256,"line_end":1256,"column_start":29,"column_end":34},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1463},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":144412,"byte_end":144417,"line_start":1279,"line_end":1279,"column_start":36,"column_end":41},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1463},"to":{"krate":1,"index":7834}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":144733,"byte_end":144738,"line_start":1296,"line_end":1296,"column_start":30,"column_end":35},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1463},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":144819,"byte_end":144824,"line_start":1303,"line_end":1303,"column_start":22,"column_end":27},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1463},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\set.rs","byte_start":144965,"byte_end":144970,"line_start":1311,"line_end":1311,"column_start":27,"column_end":32},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1463},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":3891,"byte_end":3900,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1663},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":4098,"byte_end":4104,"line_start":134,"line_end":134,"column_start":22,"column_end":28},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1675},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\indexmap-1.9.1\\src\\lib.rs","byte_start":4497,"byte_end":4503,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1675},"to":{"krate":4294967295,"index":4294967295}}]}